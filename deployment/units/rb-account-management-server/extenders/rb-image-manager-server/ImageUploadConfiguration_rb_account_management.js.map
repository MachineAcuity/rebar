{"version":3,"sources":["../../../../../units/rb-account-management-server/extenders/rb-image-manager-server/ImageUploadConfiguration_rb_account_management.js"],"names":["require","config","envRebarDataFilesLocation","process","env","REBAR_DATA_FILES_LOCATION","Error","userFileLocation","path","resolve","ImageUploadConfiguration_rb_account_management","ImageUploadConfiguration","isProperConfiguration","req","body","isUserProfilePhoto","verifyUserPermissions","objectManager","generateFileNames_async","viewerUserIDAsString","getViewerUserId","toString","usersDirectory","userGroupDirectory","substring","userDirectory","profileDirectory","localImageFileName","returnedImageFileName"],"mappings":";;AAEA;;AAEA;AACA;AACA,8F;;AAEA;;AAEA;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA;;AAEA,MAAMC,yBAAyB,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAA9C;AACA,IAAIH,yBAAyB,IAAI,IAA7B,IAAqC,OAAOA,yBAAP,KAAqC,QAA9E;AACE,MAAM,IAAII,KAAJ;AACJ,8FADI,CAAN;;;AAIF,MAAMC,gBAAgB,GAAGC,cAAKC,OAAL,CAAaP,yBAAb,EAAwC,MAAxC,CAAzB;;AAEA;;AAEe,MAAMQ,8CAAN,SAA6DC,iCAA7D,CAAsF;AACnGC,EAAAA,qBAAqB,CAACC,GAAD,EAAuB;AAC1C,QAAIA,GAAG,CAACC,IAAJ,IAAYD,GAAG,CAACC,IAAJ,CAASC,kBAAT,KAAgC,MAAhD,EAAwD,OAAO,IAAP,CAAxD;AACK,WAAO,KAAP;AACN;;AAED,QAAMC,qBAAN,CAA4BC,aAA5B,EAA0DJ,GAA1D,EAAuE,CAAE;;AAEzE,QAAMK,uBAAN;AACED,EAAAA,aADF;AAEEJ,EAAAA,GAFF;AAG0E;AACxE,UAAMM,oBAAoB,GAAGF,aAAa,CAACG,eAAd,GAAgCC,QAAhC,EAA7B;;AAEA;AACA,UAAMC,cAAc,GAAGd,cAAKC,OAAL,CAAaF,gBAAb,CAAvB;AACA,UAAMgB,kBAAkB,GAAGf,cAAKC,OAAL,CAAaa,cAAb,EAA6BH,oBAAoB,CAACK,SAArB,CAA+B,CAA/B,EAAkC,CAAlC,CAA7B,CAA3B;AACA,UAAMC,aAAa,GAAGjB,cAAKC,OAAL,CAAac,kBAAb,EAAiCJ,oBAAjC,CAAtB;AACA,UAAMO,gBAAgB,GAAGlB,cAAKC,OAAL,CAAagB,aAAb,EAA4B,SAA5B,CAAzB;;AAEA,UAAM,+BAAiBH,cAAjB,CAAN;AACA,UAAM,+BAAiBC,kBAAjB,CAAN;AACA,UAAM,+BAAiBE,aAAjB,CAAN;AACA,UAAM,+BAAiBC,gBAAjB,CAAN;;AAEA,UAAMC,kBAAkB,GAAGnB,cAAKC,OAAL,CAAaiB,gBAAb,EAA+B,WAA/B,CAA3B;AACA,UAAME,qBAAqB,GAAG,KAA9B;;AAEA,WAAO,EAAED,kBAAF,EAAsBC,qBAAtB,EAAP;AACD,GA7BkG,C","sourcesContent":["// @flow\n\nimport path from 'path'\n\nimport ensurePathExists from '../../../rb-base-server/ensurePathExists'\nimport ImageUploadConfiguration from '../../../rb-image-manager-server/ImageUploadConfiguration'\nimport ObjectManager from '../../../rb-base-server/ObjectManager'\n\n//\n\n// Read environment\nrequire('dotenv').config()\n\n//\n\nconst envRebarDataFilesLocation = process.env.REBAR_DATA_FILES_LOCATION\nif (envRebarDataFilesLocation == null || typeof envRebarDataFilesLocation !== 'string')\n  throw new Error(\n    'Error: Machine Acuity unit requires environment variable REBAR_DATA_FILES_LOCATION to be set',\n  )\n\nconst userFileLocation = path.resolve(envRebarDataFilesLocation, 'user')\n\n//\n\nexport default class ImageUploadConfiguration_rb_account_management extends ImageUploadConfiguration {\n  isProperConfiguration(req: Object): boolean {\n    if (req.body && req.body.isUserProfilePhoto === 'true') return true\n    else return false\n  }\n\n  async verifyUserPermissions(objectManager: ObjectManager, req: Object) {}\n\n  async generateFileNames_async(\n    objectManager: ObjectManager,\n    req: Object,\n  ): Promise<{ localImageFileName: string, returnedImageFileName: string }> {\n    const viewerUserIDAsString = objectManager.getViewerUserId().toString()\n\n    // Create directory\n    const usersDirectory = path.resolve(userFileLocation)\n    const userGroupDirectory = path.resolve(usersDirectory, viewerUserIDAsString.substring(0, 2))\n    const userDirectory = path.resolve(userGroupDirectory, viewerUserIDAsString)\n    const profileDirectory = path.resolve(userDirectory, 'profile')\n\n    await ensurePathExists(usersDirectory)\n    await ensurePathExists(userGroupDirectory)\n    await ensurePathExists(userDirectory)\n    await ensurePathExists(profileDirectory)\n\n    const localImageFileName = path.resolve(profileDirectory, 'photo.jpg')\n    const returnedImageFileName = 'n/a'\n\n    return { localImageFileName, returnedImageFileName }\n  }\n}\n"],"file":"ImageUploadConfiguration_rb_account_management.js"}