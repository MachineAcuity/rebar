{"version":3,"sources":["../../../units/rb-base-server/ExecutionContext.js"],"names":["fs","fsWithCallbacks","promises","require","config","envRebarDataFilesLocation","process","env","REBAR_DATA_FILES_LOCATION","Error","ExecutionContext","createRoot","params","ec","root","arrLogItems","nUniqueIDCounter","objectManager","arrExecutionPath","bLog","undefined","spawn","addLog","log","om"],"mappings":";;AAEA;AACA;AACA,yD;;AAEA,MAAMA,EAAE,GAAGC,YAAgBC,QAA3B;;AAEA;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA;;AAEA,MAAMC,yBAAyB,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAA9C;AACA,IAAIH,yBAAyB,IAAI,IAA7B,IAAqC,OAAOA,yBAAP,KAAqC,QAA9E;AACE,MAAM,IAAII,KAAJ;AACJ,8FADI,CAAN;;;AAIF;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;;;AASe,MAAMC,gBAAN,CAAuB;;;;;;;;;;;AAWpC,SAAOC,UAAP,CAAkBC,MAAlB,EAA6E;AAC3E,UAAMC,EAAE,GAAG,IAAIH,gBAAJ,EAAX;;AAEAG,IAAAA,EAAE,CAACC,IAAH,GAAU;AACRD,MAAAA,EADQ;AAERE,MAAAA,WAAW,EAAE,EAFL;AAGRC,MAAAA,gBAAgB,EAAE,CAHV;AAIRC,MAAAA,aAAa,EAAEL,MAAM,CAACK,aAAP,GAAuBL,MAAM,CAACK,aAA9B,GAA8C,IAJrD,EAAV;;AAMAJ,IAAAA,EAAE,CAACK,gBAAH,GAAsB,EAAtB;AACAL,IAAAA,EAAE,CAACM,IAAH,GAAUP,MAAM,CAACO,IAAP,KAAgBC,SAAhB,GAA4BR,MAAM,CAACO,IAAnC,GAA0C,KAApD;;AAEA,WAAON,EAAP;AACD;;AAEDQ,EAAAA,KAAK,CAACT,MAAD,EAAqC,CAAE;;AAE5CU,EAAAA,MAAM,CAACC,GAAD,EAAqE,CAAE;;AAE7EC,EAAAA,EAAE,GAAkB;AAClB,QAAI,CAAC,KAAKV,IAAL,CAAUG,aAAf,EAA8B;AAC5B,YAAM,IAAIR,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,WAAO,KAAKK,IAAL,CAAUG,aAAjB;AACD,GApCmC,C","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\nimport ObjectManager from './ObjectManager'\nimport { matchObject } from '../rb-base-universal/template'\n\nconst fs = fsWithCallbacks.promises\n\n// Read environment\nrequire('dotenv').config()\n\n//\n\nconst envRebarDataFilesLocation = process.env.REBAR_DATA_FILES_LOCATION\nif (envRebarDataFilesLocation == null || typeof envRebarDataFilesLocation !== 'string')\n  throw new Error(\n    'Error: Machine Acuity unit requires environment variable REBAR_DATA_FILES_LOCATION to be set',\n  )\n\n//\n\n// Each log record will have unique ID, time sequential, starting with 0 - is an index in array\n\n// Each log object (unique EC) will have unique ID, will be recorded in the log record\n\n// Each log record will have a payload\n\n// Each log record will have a path\n\ntype LogItem = {\n  logItemID: number,\n  arrPath: Array<string>,\n  payload: Object,\n  state: Object,\n}\n\nexport default class ExecutionContext {\n  root: {\n    ec: ExecutionContext,\n    arrLogItems: Array<LogItem>,\n    nUniqueIDCounter: number,\n    objectManager: ObjectManager | null,\n  }\n\n  arrExecutionPath: Array<string>\n  bLog: boolean\n\n  static createRoot(params: { objectManager?: ObjectManager, bLog?: boolean }) {\n    const ec = new ExecutionContext()\n\n    ec.root = {\n      ec,\n      arrLogItems: [],\n      nUniqueIDCounter: 0,\n      objectManager: params.objectManager ? params.objectManager : null,\n    }\n    ec.arrExecutionPath = []\n    ec.bLog = params.bLog !== undefined ? params.bLog : false\n\n    return ec\n  }\n\n  spawn(params: { arrPath: Array<string> }) {}\n\n  addLog(log: { arrPath?: Array<string>, payload?: Object, state?: Object }) {}\n\n  om(): ObjectManager {\n    if (!this.root.objectManager) {\n      throw new Error('rb-base-server/ec : ObjectManager not set')\n    }\n\n    return this.root.objectManager\n  }\n}\n"],"file":"ExecutionContext.js"}