{"version":3,"sources":["../../../units/rb-base-server/MasterReader.js"],"names":["fs","fsWithCallbacks","promises","FileBase","constructor","arrRelativePath","relativePath","join","name","length","File","Directory","arrContents","MasterReader","basePath","directoriesByRelativePath","Map","fileContentsByRelativePath","skipFile","fileName","arrAllFiles","setSkipFile","initialize","baseDir","readDirectory","dir","set","dirContent","readdir","substr","stat","fileOrDirToAdd","isFile","file","concat","isDirectory","subDir","Error","JSON","stringify","push","readFile","currentContent","get","newContent","encoding","toString","getAllFiles","getAllFiledHelper","fileOrDirectory"],"mappings":"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","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\n\nconst fs = fsWithCallbacks.promises\n\nclass FileBase {\n  arrRelativePath: Array<string>\n  relativePath: string\n  name: string\n\n  constructor(arrRelativePath: Array<string>) {\n    this.arrRelativePath = arrRelativePath\n    this.relativePath = arrRelativePath.join('/')\n    this.name = arrRelativePath[arrRelativePath.length - 1]\n  }\n}\n\nexport class File extends FileBase {\n  contentAsString: ?string\n}\n\nexport class Directory extends FileBase {\n  arrContents: Array<FileBase>\n  arrAllFiles: Array<File>\n\n  constructor(arrRelativePath: Array<string>) {\n    super(arrRelativePath)\n\n    this.arrContents = []\n  }\n}\n\n/**\n * Manages reading of multiple files\n * @class MasterReader\n */\nexport default class MasterReader {\n  arrAllFiles: Array<File>\n  baseDir: ?Directory\n  basePath: string\n  directoriesByRelativePath: Map<string, Directory>\n  fileContentsByRelativePath: Map<string, string>\n  skipFile: (fileName: string) => boolean\n\n  constructor(basePath: string) {\n    this.basePath = basePath\n\n    this.directoriesByRelativePath = new Map()\n    this.fileContentsByRelativePath = new Map()\n\n    this.skipFile = (fileName: string) => false\n    this.arrAllFiles = []\n  }\n\n  /**\n   * Provides a function evaluating whether to skip a file, or not\n   * @memberof MasterReader\n   */\n  setSkipFile(skipFile: (fileName: string) => boolean) {\n    this.skipFile = skipFile\n  }\n\n  async initialize() {\n    // And read\n    this.baseDir = await this.readDirectory([])\n  }\n\n  async readDirectory(arrRelativePath: Array<string>) {\n    const dir = new Directory(arrRelativePath)\n    this.directoriesByRelativePath.set(dir.relativePath, dir)\n\n    const dirContent = await fs.readdir(this.basePath + '/' + dir.relativePath)\n    for (let fileName of dirContent) {\n      // Skip DS store iles on mac\n      if (fileName === '.DS_Store') continue\n\n      // Skip files according to passed function\n      if (this.skipFile(fileName)) {\n        continue\n      }\n\n      // Skip . and .. directories\n      if (fileName.substr(0, 1) === '.') {\n        continue\n      }\n\n      const stat = await fs.stat(this.basePath + '/' + dir.relativePath + '/' + fileName)\n\n      let fileOrDirToAdd\n\n      if (stat.isFile()) {\n        const file = new File(arrRelativePath.concat(fileName))\n\n        fileOrDirToAdd = file\n      } else if (stat.isDirectory()) {\n        const subDir = await this.readDirectory(arrRelativePath.concat(fileName))\n\n        fileOrDirToAdd = subDir\n      } else\n        throw new Error(\n          'MasterReader: Neither file nor directory' + JSON.stringify(arrRelativePath),\n        )\n\n      dir.arrContents.push(fileOrDirToAdd)\n    }\n\n    return dir\n  }\n\n  async readFile(fileName: string): Promise<string> {\n    const currentContent = this.fileContentsByRelativePath.get(fileName)\n\n    if (currentContent) return currentContent\n\n    const newContent = (await fs.readFile(this.basePath + '/' + fileName, {\n      encoding: 'utf8',\n    })).toString()\n    this.fileContentsByRelativePath.set(fileName, newContent)\n\n    return newContent\n  }\n\n  getAllFiles() {\n    if (!this.baseDir) throw new Error()\n\n    if (this.arrAllFiles.length > 0) return this.arrAllFiles\n\n    this.getAllFiledHelper(this.baseDir)\n\n    return this.arrAllFiles\n  }\n\n  getAllFiledHelper(dir: Directory) {\n    for (let fileOrDirectory of dir.arrContents) {\n      if (fileOrDirectory instanceof Directory) {\n        // Sub-dir\n        this.getAllFiledHelper(fileOrDirectory)\n      } else if (fileOrDirectory instanceof File) {\n        this.arrAllFiles.push(fileOrDirectory)\n      }\n    }\n  }\n}\n"],"file":"MasterReader.js"}