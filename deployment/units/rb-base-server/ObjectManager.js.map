{"version":3,"sources":["../../../units/rb-base-server/ObjectManager.js"],"names":["User_0","User","Object","assign","defaultPersister","uuidNull","id","UserToken2","UserToken2Anonymous","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","ObjectManager","constructor","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","response","siteInformation","artifact_id","filesDirectory","latestPublishedDirectory","inEditingMode","isMaDesignerDisabled","siteConfiguration","siteDirectory","registerEntity","entityName","EntityType","options","Error","persister","add","entityDefinition","EntityName","fieldsWithSuffix","Persister","TriggersForAdd","TriggersForUpdate","TriggersForRemove","TriggersForUpdateShouldRetrieveCurrentRecord","UserPermissionsForObject","use","supportedSuffixes","example","suffix","fieldName","hasOwnProperty","RegisterTriggerForAdd","handler","push","RegisterTriggerForUpdate","shouldRetrieveCurrentRecord","RegisterTriggerForAddAndUpdate","RegisterTriggerForRemove","addUserIdAndOrSiteIdToFilterOrFields","filterOrFields","doNotAddFieldName","hasDoNotAdd","updatedCreatedAndModifiedFields","fields","isCreating","dtNow","Date","setViewerUserId","setRequest","req","res","setSiteInformation","getLoadersSingle","foundLoaders","getLoadersMultiple","clearLoadersMultiple","recordChange","isDeletion","records","getViewerUserId","getRequest","getLoader","multipleResults","entityType","loadersList","loader","DataLoader","filter","getObjectList","err","NestedError","getOneObject","getOneObject_async","query","uuidEquals","bSuppressPermissionChecks","_SuppressPermissionChecks","permission","UserPermissionForObject_ObjectType","UserPermissionForObject_object_id","UserPermissionForObject_PermitRead","loaderIdentifier","keys","sort","join","result","load","change","getObjectList_async","arrPermissions","arrIDValues","length","$in","arrResults","ix","splice","invalidateLoaderCache","loaderFieldName","clear","executeTriggers","arrTriggers","oldFields","arrPromises","trigger","Promise","all","assignPrimaryKey","uuidRandom","toString","permissions","defaultOnAdd","read","insert","update","delete","a_UserPermissionForObject","UserPermissionForObject_PermitUpdate","UserPermissionForObject_PermitDelete","executionStep","remove","uuidFromString","uuidToString","cursorForObjectInConnection","arr","obj","obj_id","arr_element_id","cursor","errMessage","initializePersisters","runAsPartOfSetupDatabase","cb","initialize","getObjectManager","objectManager"],"mappings":"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","sourcesContent":["// @flow\n\nimport DataLoader from 'dataloader'\nimport { cursorForObjectInConnection } from 'graphql-relay'\nimport NestedError from 'nested-error-stacks'\n\nimport UserToken2Anonymous from '../_configuration/rb-base-server/UserToken2Anonymous'\nimport defaultPersister from '../_configuration/rb-base-server/graphql/defaultPersister'\nimport getNewUser from '../_configuration/rb-base-server/graphql/model/getNewUser'\nimport { getSiteInformation } from '../_configuration/rb-base-server/siteSettings'\nimport type { SiteInformation } from '../rb-appbase-server/types/SiteInformation.types'\nimport User from '../rb-appbase-server/graphql/model/User'\n\nimport log from './log'\n\n// Anonymous user\nconst User_0 = new User(\n  Object.assign(getNewUser(defaultPersister.uuidNull()), {\n    id: defaultPersister.uuidNull(),\n    UserToken2: UserToken2Anonymous,\n    User_DisplayName: 'Anonymous',\n  }),\n)\n\nexport { User_0 }\n\n// Type of entity definition\ntype EntityDefinition = {\n  EntityName: string,\n  EntityType: Function,\n  fieldsWithSuffix: { [string]: boolean },\n  Persister: Object,\n  TriggersForAdd: Array<Function>,\n  TriggersForUpdate: Array<Function>,\n  TriggersForRemove: Array<Function>,\n  TriggersForUpdateShouldRetrieveCurrentRecord: boolean,\n  UserPermissionsForObject: {\n    use: boolean,\n    defaultOnAdd?: {\n      read: boolean,\n      insert: boolean,\n      update: boolean,\n      delete: boolean,\n    },\n  },\n}\n\n// Static set of entity definitions\nconst entityDefinitions: {\n  [string]: EntityDefinition,\n} = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true,\n}\n\n/**\n * Class for loading and storing objects\n * @class ObjectManager\n */\nexport default class ObjectManager {\n  loadersSingle: Object\n  loadersMultiple: Object\n  Viewer_User_id: string\n  changes: Object\n  request: ?Object\n  response: ?Object\n  siteInformation: SiteInformation\n\n  /**\n   * Creates a new instance of Object Manager\n   * @memberOf ObjectManager\n   */\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = 'Object Manager: viewer user id has not been set'\n\n    // Request and response objects, if available\n    this.request = null\n    this.response = null\n\n    // Setting site information mostly to satify flow;\n    // also, in order to be able to better detect errors when not set\n    this.siteInformation = {\n      artifact_id: 'Object Manager: artifact_id has not been set',\n      filesDirectory: '',\n      latestPublishedDirectory: '',\n      inEditingMode: false,\n      isMaDesignerDisabled: false,\n      siteConfiguration: {},\n      siteDirectory: '',\n    }\n  }\n\n  /**\n   * Registers an entity with Object Manager. This is to be used exclusively from\n   * the model definition unit/unit-name/graphql/mode/EntityName.js\n   * @memberOf ObjectManager\n   */\n  static registerEntity(\n    entityName: string,\n    EntityType: Function,\n    options: {\n      persister?: Object,\n      UserPermissionsForObject?: {\n        use: boolean,\n        defaultOnAdd?: {\n          read: boolean,\n          insert: boolean,\n          update: boolean,\n          delete: boolean,\n        },\n      },\n    },\n  ): void {\n    if (entityName in entityDefinitions) throw new Error('Entity already registered: ' + entityName)\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    let { persister } = options\n    if (persister == null) persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add(persister)\n\n    const entityDefinition = {\n      EntityName: entityName,\n      EntityType,\n      fieldsWithSuffix: {},\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false,\n      UserPermissionsForObject:\n        options.UserPermissionsForObject != null\n          ? options.UserPermissionsForObject\n          : { use: false },\n    }\n\n    // Determine supported fields by fields with suffix\n    // For the User-related tables, there is no automatic support:\n    // User_id and artifact_id have to be explicitly specified\n    const supportedSuffixes =\n      entityName === 'User' || entityName === 'UserAccount' || entityName === 'UserSession'\n        ? [ '_created_by', '_created_on', '_modified_on', '_modified_by' ]\n        : [\n            '_artifact_id',\n            '_user_id',\n            '_created_by',\n            '_created_on',\n            '_modified_on',\n            '_modified_by',\n          ]\n\n    // Create sample entity and go through the fields looking for special fields\n    const example = new EntityType({})\n    for (let suffix of supportedSuffixes) {\n      const fieldName = entityDefinition.EntityName + suffix\n\n      // Does the object type have it?\n      if (example.hasOwnProperty(fieldName)) {\n        entityDefinition.fieldsWithSuffix[suffix] = true\n      }\n    }\n\n    entityDefinitions[entityName] = entityDefinition\n  }\n\n  /**\n   * Registers a trigger for when an entity is added\n   * @memberOf ObjectManager\n   */\n  static RegisterTriggerForAdd(entityName: string, handler: Function): void {\n    entityDefinitions[entityName].TriggersForAdd.push(handler)\n  }\n\n  static RegisterTriggerForUpdate(\n    entityName: string,\n    handler: Function,\n    shouldRetrieveCurrentRecord: boolean,\n  ): void {\n    entityDefinitions[entityName].TriggersForUpdate.push(handler)\n\n    if (shouldRetrieveCurrentRecord)\n      entityDefinitions[entityName].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate(entityName: string, handler: Function): void {\n    ObjectManager.RegisterTriggerForAdd(entityName, handler)\n    ObjectManager.RegisterTriggerForUpdate(entityName, handler, false)\n  }\n\n  static RegisterTriggerForRemove(entityName: string, handler: any) {\n    entityDefinitions[entityName].TriggersForRemove.push(handler)\n  }\n\n  // Apply artifact_id, User_id security\n  addUserIdAndOrSiteIdToFilterOrFields(entityDefinition: EntityDefinition, filterOrFields: Object) {\n    for (let suffix of [ '_artifact_id', '_user_id' ]) {\n      // Does the object type have it?\n      if (entityDefinition.fieldsWithSuffix[suffix]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        const doNotAddFieldName = 'do_not_add_' + fieldName\n        const hasDoNotAdd = filterOrFields.hasOwnProperty(doNotAddFieldName)\n\n        // Is the filter/fields collection missing it, and are we not prevented from adding it?\n        if (!filterOrFields.hasOwnProperty(fieldName) && !hasDoNotAdd) {\n          if (suffix === '_artifact_id') {\n            filterOrFields[fieldName] = this.siteInformation.artifact_id\n          } else if (this.Viewer_User_id !== 'Object Manager: viewer user id has not been set') {\n            filterOrFields[fieldName] = this.Viewer_User_id\n          }\n        }\n\n        if (hasDoNotAdd) {\n          delete filterOrFields[doNotAddFieldName]\n        }\n      }\n    }\n  }\n\n  // Update created and modified fields\n  updatedCreatedAndModifiedFields(\n    entityDefinition: EntityDefinition,\n    fields: Object,\n    isCreating: boolean,\n  ) {\n    const dtNow = new Date()\n\n    for (let suffix of isCreating\n      ? [ '_created_by', '_created_on', '_modified_on', '_modified_by' ]\n      : [ '_modified_on', '_modified_by' ]) {\n      // Does the object type have it?\n      if (entityDefinition.fieldsWithSuffix[suffix]) {\n        const fieldName = entityDefinition.EntityName + suffix\n\n        // Assign the modified/created field\n        fields[fieldName] =\n          suffix === '_modified_by' || suffix === '_created_by'\n            ? this.Viewer_User_id !== 'Object Manager: viewer user id has not been set'\n              ? this.Viewer_User_id\n              : '00000000-0000-0000-0000-000000000000'\n            : dtNow\n      }\n    }\n  }\n\n  setViewerUserId(Viewer_User_id: string): void {\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest(req: any, res: any): void {\n    this.request = req\n    this.response = res\n  }\n\n  setSiteInformation(siteInformation: Object): void {\n    this.siteInformation = siteInformation\n  }\n\n  getLoadersSingle(entityName: string) {\n    const foundLoaders = this.loadersSingle[entityName]\n\n    if (foundLoaders != null) {\n      return foundLoaders\n    } else {\n      this.loadersSingle[entityName] = {}\n      return this.loadersSingle[entityName]\n    }\n  }\n\n  getLoadersMultiple(entityName: string) {\n    const foundLoaders = this.loadersMultiple[entityName]\n\n    if (foundLoaders != null) {\n      return foundLoaders\n    } else {\n      this.loadersMultiple[entityName] = {}\n      return this.loadersMultiple[entityName]\n    }\n  }\n\n  clearLoadersMultiple(entityName: string) {\n    this.loadersMultiple[entityName] = {}\n  }\n\n  recordChange(entityName: string, fields: Object, isDeletion: boolean) {\n    let records = this.changes[entityName]\n    if (records == null) records = this.changes[entityName] = {}\n\n    const id = fields.id\n\n    records[id] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n    if (this.Viewer_User_id === 'Object Manager: viewer user id has not been set')\n      throw new Error('Object Manager: viewer user id has not been set')\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n    if (this.request == null) throw new Error('Object Manager: request has not been set')\n\n    return this.request\n  }\n\n  getLoader(entityName: string, fieldName: string, multipleResults: boolean) {\n    if (!(entityName in entityDefinitions))\n      throw new Error('Can not find entity type named ' + entityName)\n\n    const entityDefinition = entityDefinitions[entityName]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults\n      ? this.getLoadersMultiple(entityName)\n      : this.getLoadersSingle(entityName)\n\n    let loader = loadersList[fieldName]\n    if (loader == null) {\n      if (multipleResults)\n        loader = new DataLoader((filter) => {\n          try {\n            return entityDefinition.Persister.getObjectList(entityName, entityType, filter)\n          } catch (err) {\n            log(\n              'error',\n              'rb-base-server ObjectManager getLoader: Could not load multiple results',\n              {\n                fieldName,\n                entityName,\n                err,\n              },\n            )\n            throw new NestedError('getLoader failed', err)\n          }\n        })\n      else\n        loader = new DataLoader((filter) => {\n          try {\n            return entityDefinition.Persister.getOneObject(entityName, entityType, filter)\n          } catch (err) {\n            log('error', 'rb-base-server ObjectManager getLoader: Could not load single result', {\n              fieldName,\n              entityName,\n              err,\n            })\n            throw new NestedError('getLoader failed', err)\n          }\n        })\n\n      loadersList[fieldName] = loader\n    }\n\n    return loader\n  }\n\n  async getOneObject_async(entityName: string, query: Object): Promise<Object | null> {\n    const entityDefinition = entityDefinitions[entityName]\n    if (entityDefinition == null) throw new Error('Cound not find entity: ' + entityName)\n\n    // Special hack for anonymous users\n    if (entityName === 'User')\n      if (defaultPersister.uuidEquals(defaultPersister.uuidNull(), query.id)) return User_0\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields(entityDefinition, query)\n\n    // Verify user object permission, if applies\n    let bSuppressPermissionChecks = false\n    if (query._SuppressPermissionChecks) {\n      bSuppressPermissionChecks = true\n      query = Object.assign({}, query)\n      delete query._SuppressPermissionChecks\n    }\n    if (entityDefinition.UserPermissionsForObject.use && !bSuppressPermissionChecks) {\n      const permission = await this.getOneObject_async('UserPermissionForObject', {\n        UserPermissionForObject_ObjectType: entityName,\n        UserPermissionForObject_object_id: query.id,\n      })\n\n      // If object is not found, or read permission not found, bail out\n      if (permission == null || !permission.UserPermissionForObject_PermitRead) return null\n    }\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys(query).sort().join(',')\n    const loader = this.getLoader(entityName, loaderIdentifier, false)\n\n    let result = await loader.load(query)\n\n    const changes = this.changes[entityName]\n    if (changes && result) {\n      const change = changes[result.id]\n\n      if (change != null) {\n        // Object is not found, return null if deleted\n        if (change === deletedRecord) {\n          result = null\n        } else {\n          // Add or update\n          Object.assign(result, change)\n        }\n      }\n    }\n\n    return result\n  }\n\n  async getObjectList_async(entityName: string, query: Object) {\n    const entityDefinition = entityDefinitions[entityName]\n    if (entityDefinition == null) throw new Error('Cound not find entity: ' + entityName)\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields(entityDefinition, query)\n\n    // Add user object permissions to query, if they apply\n    let bSuppressPermissionChecks = false\n    if (query._SuppressPermissionChecks) {\n      bSuppressPermissionChecks = true\n      query = Object.assign({}, query)\n      delete query._SuppressPermissionChecks\n    }\n    if (entityDefinition.UserPermissionsForObject.use && !bSuppressPermissionChecks) {\n      const arrPermissions = await this.getObjectList_async('UserPermissionForObject', {\n        UserPermissionForObject_ObjectType: entityName,\n      })\n\n      // Determine ID values that are permitted for user\n      const arrIDValues = []\n      for (let permission of arrPermissions)\n        if (permission.UserPermissionForObject_PermitRead) {\n          arrIDValues.push(permission.UserPermissionForObject_object_id)\n        }\n\n      // If there are no permissions, there is no reason to query further\n      if (arrIDValues.length === 0) return []\n\n      // Set an in condition - detrimental to performance yet quick and dirty way to ensure\n      // that only permitted IDs can be accessed\n      query.id = { $in: arrIDValues }\n    }\n\n    const loaderIdentifier = Object.keys(query).sort().join(',')\n    const loader = this.getLoader(entityName, loaderIdentifier, true)\n\n    const arrResults = await loader.load(query)\n\n    const changes = this.changes[entityName]\n\n    if (changes) {\n      for (let ix = 0; ix < arrResults.length; ix++) {\n        const change = changes[arrResults[ix].id]\n        if (change != null) {\n          if (change === deletedRecord)\n            // Reduce ix in order not to skip over a record\n            arrResults.splice(ix--, 1)\n          else\n            // Add or update\n            Object.assign(arrResults[ix], change)\n        }\n      }\n    }\n\n    return arrResults\n  }\n\n  invalidateLoaderCache(entityName: string, fields: any) {\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple(entityName)\n\n    const loadersSingle = this.getLoadersSingle(entityName)\n    for (let loaderFieldName in loadersSingle) {\n      if (loaderFieldName === 'id') loadersSingle[loaderFieldName].clear(fields.id)\n      else delete loadersSingle[loaderFieldName]\n    }\n  }\n\n  executeTriggers(arrTriggers: Array<Function>, fields: Object, oldFields: ?Object) {\n    const arrPromises = []\n    for (let trigger of arrTriggers) {\n      arrPromises.push(trigger(this, fields, oldFields))\n    }\n\n    return Promise.all(arrPromises)\n  }\n\n  assignPrimaryKey(entityName: string, fields: any) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if (entityDefinition == null) throw new Error('Cound not find entity: ' + entityName)\n\n    // Generate primary key, overwrite if already present\n    fields.id = entityDefinition.Persister.uuidRandom()\n  }\n\n  async add(entityName: string, fields: Object): any {\n    const entityDefinition = entityDefinitions[entityName]\n    if (entityDefinition == null) throw new Error('Cound not find entity: ' + entityName)\n\n    // Apply artifact_id, User_id security\n    this.addUserIdAndOrSiteIdToFilterOrFields(entityDefinition, fields)\n\n    // Update created and modified fields\n    this.updatedCreatedAndModifiedFields(entityDefinition, fields, true)\n\n    // Generate primary key, if not already present\n    if (!fields.id) fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if (entityName === 'User') this.setViewerUserId(fields.id.toString())\n\n    this.recordChange(entityName, fields, false)\n\n    try {\n      await this.executeTriggers(entityDefinition.TriggersForAdd, fields)\n\n      await entityDefinition.Persister.add(entityName, fields, entityDefinition.EntityType)\n\n      if (entityDefinition.UserPermissionsForObject.use) {\n        const permissions = entityDefinition.UserPermissionsForObject.defaultOnAdd\n          ? entityDefinition.UserPermissionsForObject.defaultOnAdd\n          : {\n              read: true,\n              insert: true,\n              update: true,\n              delete: true,\n            }\n\n        const a_UserPermissionForObject = {\n          UserPermissionForObject_ObjectType: entityName,\n          UserPermissionForObject_object_id: fields.id,\n          UserPermissionForObject_PermitRead: permissions.read,\n          UserPermissionForObject_PermitUpdate: permissions.update,\n          UserPermissionForObject_PermitDelete: permissions.delete,\n        }\n\n        await this.add('UserPermissionForObject', a_UserPermissionForObject)\n      }\n    } catch (err) {\n      log('error', 'rb-base-server ObjectManager add: failed', {\n        fields,\n        entityName,\n        err,\n      })\n      throw new NestedError('Add failed', err)\n    }\n\n    this.invalidateLoaderCache(entityName, fields)\n\n    return fields.id\n  }\n\n  async update(entityName: string, fields: Object): Promise<void> {\n    const entityDefinition = entityDefinitions[entityName]\n    if (entityDefinition == null) throw new Error('Cound not find entity: ' + entityName)\n\n    let executionStep = ''\n    try {\n      executionStep = 'Apply artifact_id, User_id security'\n      this.addUserIdAndOrSiteIdToFilterOrFields(entityDefinition, fields)\n\n      executionStep = 'Verify user object permission, if applies'\n      if (entityDefinition.UserPermissionsForObject.use) {\n        const permission = await this.getOneObject_async('UserPermissionForObject', {\n          UserPermissionForObject_ObjectType: entityName,\n          UserPermissionForObject_object_id: fields.id,\n        })\n\n        // If object is not found, or read permission not found, bail out\n        if (permission == null || !permission.UserPermissionForObject_PermitUpdate) return\n      }\n\n      executionStep = 'Update created and modified fields'\n      this.updatedCreatedAndModifiedFields(entityDefinition, fields, false)\n\n      executionStep = 'Retrieve the current values, if triggers will be used'\n      let oldFields = null\n      if (entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord) {\n        oldFields = await this.getOneObject_async(entityName, {\n          id: fields.id,\n        })\n      }\n\n      executionStep = 'Record change'\n      this.recordChange(entityName, fields, false)\n\n      executionStep = 'Execute triggers'\n      await this.executeTriggers(entityDefinition.TriggersForUpdate, fields, oldFields)\n\n      executionStep = 'Execute persister update'\n      await entityDefinition.Persister.update(entityName, fields)\n    } catch (err) {\n      log('error', 'rb-base-server ObjectManager update: failed', {\n        entityName,\n        err,\n        executionStep,\n        fields,\n      })\n      throw new NestedError('Update failed', err)\n    }\n\n    this.invalidateLoaderCache(entityName, fields)\n  }\n\n  async remove(entityName: string, fields: Object) {\n    const entityDefinition = entityDefinitions[entityName]\n    if (entityDefinition == null) throw new Error('Cound not find entity: ' + entityName)\n\n    try {\n      // Apply artifact_id, User_id security\n      this.addUserIdAndOrSiteIdToFilterOrFields(entityDefinition, fields)\n\n      // Verify user object permission, if applies\n      if (entityDefinition.UserPermissionsForObject.use) {\n        const permission = await this.getOneObject_async('UserPermissionForObject', {\n          UserPermissionForObject_ObjectType: entityName,\n          UserPermissionForObject_object_id: fields.id,\n        })\n\n        // If object is not found, or read permission not found, bail out\n        if (permission == null || !permission.UserPermissionForObject_PermitDelete) return\n      }\n\n      this.recordChange(entityName, fields, true)\n\n      await this.executeTriggers(entityDefinition.TriggersForRemove, fields)\n\n      await entityDefinition.Persister.remove(entityName, fields)\n    } catch (err) {\n      log('error', 'rb-base-server ObjectManager remove: failed', {\n        fields,\n        entityName,\n      })\n      throw new NestedError('Remove failed', err)\n    }\n\n    this.invalidateLoaderCache(entityName, fields)\n  }\n\n  uuidFromString(entityName: string, id: string) {\n    try {\n      const entityDefinition = entityDefinitions[entityName]\n\n      return entityDefinition.Persister.uuidFromString(id)\n    } catch (err) {\n      throw new NestedError('uuidFromString for entity [' + entityName + '] and id = ' + id, err)\n    }\n  }\n\n  uuidToString(entityName: string, id: Object) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    return entityDefinition.Persister.uuidToString(id)\n  }\n\n  cursorForObjectInConnection(entityName: string, arr: Array<Object>, obj: Object) {\n    try {\n      const entityDefinition = entityDefinitions[entityName]\n\n      if (arr.length > 0) {\n        // IDs can be both strings and Uuid. Check that first, and convert to String\n        const obj_id = entityDefinition.Persister.uuidToString(obj.id)\n\n        // Make sure that the object and its instance can be compared with ===\n        // assumed that the object has id field which is unique\n        for (let ix = 0; ix < arr.length; ix++) {\n          const arr_element_id = entityDefinition.Persister.uuidToString(arr[ix].id)\n          if (arr_element_id === obj_id) {\n            arr[ix] = obj\n            break\n          }\n        }\n      } else {\n        return null\n      }\n\n      let cursor = cursorForObjectInConnection(arr, obj)\n      if (cursor == null) {\n        throw new Error('Cursor is null')\n      }\n      return cursor\n    } catch (err) {\n      const errMessage =\n        'rb-base-server ObjectManager cursorForObjectInConnection: Failed to create cursor'\n      log('error', errMessage, { arr, entityName, obj, err })\n      throw new Error(errMessage)\n    }\n  }\n\n  static initializePersisters(runAsPartOfSetupDatabase: boolean, cb: Function): void {\n    for (let persister of setPersisters)\n      persister.initialize(runAsPartOfSetupDatabase, () => {\n        cb()\n      })\n  }\n}\n\n// Register the user\nObjectManager.registerEntity('User', User, {})\n\n// Get an Object Manager with site information\nexport async function getObjectManager(req: Object, res: Object): Promise<ObjectManager> {\n  // Set site information\n  const siteInformation = await getSiteInformation(req, res) // Create individual object manager for each request\n  const objectManager = new ObjectManager() // Set request and response\n\n  objectManager.setRequest(req, res) // Place designer configuration into object manager\n  objectManager.setSiteInformation(siteInformation)\n  return objectManager\n}\n"],"file":"ObjectManager.js"}