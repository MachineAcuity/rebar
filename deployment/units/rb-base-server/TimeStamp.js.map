{"version":3,"sources":["../../../units/rb-base-server/TimeStamp.js"],"names":["ndtStamp","ndtStampHalf","TimeStamp","update","Date","getTime","generate","ndtOldTimeStamp","lastNdtCurrentTime"],"mappings":";;AAEA,IAAIA,QAAgB,GAAG,CAAvB;AACA,IAAIC,YAAoB,GAAG,CAA3B;;AAEA;;;AAGe,MAAMC,SAAN,CAAgB;AAC7B;;;AAGA,SAAOC,MAAP,GAAgB;AACdH,IAAAA,QAAQ,GAAG,IAAII,IAAJ,GAAWC,OAAX,EAAX;AACAJ,IAAAA,YAAY,GAAGD,QAAQ,GAAG,CAA1B;AACD;;AAED;;;;;AAKA,SAAOM,QAAP,CAAgBC,eAAhB,EAA0C;AACxC,WAAOA,eAAe,IAAI,IAAnB,GAA0BN,YAA1B,GAAyC,CAACM,eAAe,GAAGP,QAAnB,IAA+B,CAA/E;AACD;;AAED;;;AAGA,SAAOQ,kBAAP,GAA4B;AAC1B,WAAOR,QAAP;AACD,GAvB4B,C","sourcesContent":["// @flow\n\nlet ndtStamp: number = 0\nlet ndtStampHalf: number = 0\n\n/**\n * Tool for generating usage-frequency time stamps.\n */\nexport default class TimeStamp {\n  /**\n   * Updates the time stamp generator with the current time.\n   */\n  static update() {\n    ndtStamp = new Date().getTime()\n    ndtStampHalf = ndtStamp / 2\n  }\n\n  /**\n   * Generates a new time stamp (given the old time stamp, if available).\n   * For existing objects old time stamp must be provided in order to be\n   * able to use generated time stamp for usage frequency management.\n   */\n  static generate(ndtOldTimeStamp?: number) {\n    return ndtOldTimeStamp == null ? ndtStampHalf : (ndtOldTimeStamp + ndtStamp) / 2\n  }\n\n  /**\n   * Last generated current time timestamp\n   */\n  static lastNdtCurrentTime() {\n    return ndtStamp\n  }\n}\n"],"file":"TimeStamp.js"}