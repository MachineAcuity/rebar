{"version":3,"sources":["../../../units/rb-base-server/server.js"],"names":["require","config","port","process","env","PORT","Error","host","HOST","accessControlAllowedOriginsAsString","ACCESS_CONTROL_ALLOWED_ORIGINS","accessControlAllowedOrigins","JSON","parse","Array","isArray","ex","on","err","console","error","message","stack","ignoreErr","globalErr","name","version","NODE_ENV","ObjectCache","initializeObjectCache","server","use","req","res","next","origin","get","indexOf","setHeader","set","firstPathElement","firstPathElementIsArtifactName","serverHealthz","serverNightlyMaintenance","staticServer","express","static","path","resolve","__dirname","maxAge","ObjectManager","initializePersisters","listen","startDevelopmentServer","localIPDevelopmentServer"],"mappings":"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","sourcesContent":["// @flow\n\nimport path from 'path'\n\nimport express from 'express'\nimport compression from 'compression'\nimport cookieParser from 'cookie-parser'\n\nimport { firstPathElementIsArtifactName } from '../_configuration/rb-base-server/artifactSettings'\nimport { name, version } from '../../package.json'\nimport servers from '../_configuration/rb-base-server/servers'\n\nimport log from './log'\nimport ObjectCache from './ObjectCache'\nimport ObjectManager from './ObjectManager'\nimport serverHealthz from './serverHealthz'\nimport serverNightlyMaintenance from './serverNightlyMaintenance'\n\n//\n\n// Read environment\nrequire('dotenv').config()\n\nconst port = process.env.PORT\nif (port == null || typeof port !== 'string')\n  throw new Error('rb-base-server/server.js requires the environment variable PORT to be set')\n\nconst host = process.env.HOST\nif (host == null || typeof host !== 'string')\n  throw new Error('rb-base-server/server.js requires the environment variable HOST to be set')\n\nconst accessControlAllowedOriginsAsString = process.env.ACCESS_CONTROL_ALLOWED_ORIGINS\nif (\n  accessControlAllowedOriginsAsString == null ||\n  typeof accessControlAllowedOriginsAsString !== 'string'\n)\n  throw new Error(\n    'rb-base-server/server.js requires the environment variable ACCESS_CONTROL_ALLOWED_ORIGINS to be set',\n  )\nlet accessControlAllowedOrigins = []\ntry {\n  accessControlAllowedOrigins = JSON.parse(accessControlAllowedOriginsAsString)\n  if (!Array.isArray(accessControlAllowedOrigins)) throw new Error()\n} catch (ex) {\n  throw new Error(\n    'rb-base-server/server.js requires the environment variable ACCESS_CONTROL_ALLOWED_ORIGINS to be array of strings',\n  )\n}\n\n//\n\n// Global eror handling\nprocess.on('uncaughtException', function(err) {\n  try {\n    try {\n      console.error(err.message)\n      console.error(err.stack)\n    } catch (ignoreErr) {}\n\n    log('error', 'rb-base-server server: uncaughtException', { err })\n  } catch (globalErr) {\n    try {\n      console.error(globalErr.message)\n      console.error(globalErr.stack)\n    } catch (ignoreErr) {}\n  }\n  // Handle your errors here\n\n  // global.__current__ is added via middleware\n  // Be aware that this is a bad practice,\n  // global.__current__ being a global, can change\n  // without advice, so you might end responding with\n  // serverError() to a different request than the one\n  // that originated the error if this one happened async\n  //  global.__current__.res.serverError()\n})\n\n// Log startup information\nlog('info', 'rb-base-server start', {\n  name,\n  version,\n  NODE_ENV: process.env.NODE_ENV,\n  accessControlAllowedOrigins,\n})\n\n// Get object cache ready\nObjectCache.initializeObjectCache()\n\n// Main router\nconst server = express()\n\n// Set up access control\nserver.use(function(req, res, next) {\n  // Find out what the origin is, could be string or undefined\n  const origin = req.get('origin')\n\n  // Allow requests with no origin (like mobile apps or curl requests)\n  // For requests with origin, verify that is is allowed\n  if (origin && accessControlAllowedOrigins.indexOf(origin) > -1) {\n    res.setHeader('Access-Control-Allow-Origin', origin)\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', true)\n  }\n\n  // Pass to next layer of middleware\n  next()\n}) // Configure main router\n\nserver.set('trust proxy', 'loopback')\nserver.set('x-powered-by', false)\nserver.use(compression())\nserver.use(cookieParser()) // GraphQL server requires this\n\nconst firstPathElement = firstPathElementIsArtifactName ? '/:artifact_name' : ''\n\n// Health server\nserver.use(firstPathElement + '/healthz', serverHealthz)\n\n// Nightly maintenance server, if defined\nif (serverNightlyMaintenance) {\n  server.use(firstPathElement + '/serverNightlyMaintenance', serverNightlyMaintenance)\n}\n\n// Static public files server. Serve both using first path elements, and as in root. The reason\n// is that between gantry, and actual deployment, assets requested by client.js and loaded by\n// webpack, both paths could be used\nconst staticServer = express.static(\n  path.resolve(__dirname + '/../_configuration/rb-base-server/public_files/'),\n  {\n    maxAge:\n      1 *\n      // day\n      86400,\n  },\n)\nserver.use('/', staticServer)\nif (firstPathElement !== '') {\n  server.use(firstPathElement + '/', staticServer)\n}\n\n// Initialize server extenders\nservers(server, firstPathElementIsArtifactName)\n\nObjectManager.initializePersisters(false, () => {\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if (process.env.NODE_ENV === 'production') {\n    // Production - serve as told\n    server.listen(port, host)\n  } else {\n    // Development server - localhost. Always run on localhost\n    startDevelopmentServer(port, '127.0.0.1')\n    // Development server - on a specific IP, if different from localhost\n    if (host !== '127.0.0.1') startDevelopmentServer(port, host)\n  }\n})\n\nfunction startDevelopmentServer(port, host) {\n  const localIPDevelopmentServer = express()\n  localIPDevelopmentServer.use(server)\n  localIPDevelopmentServer.listen(port, host)\n}\n"],"file":"server.js"}