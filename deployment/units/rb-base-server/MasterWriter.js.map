{"version":3,"sources":["../../../units/rb-base-server/MasterWriter.js"],"names":["fs","fsWithCallbacks","promises","MasterWriter","constructor","basePath","logToConsole","directories","Map","arrPromises","ensureRelativePathExistsHelper","filePath","has","mkdir","path","resolve","err","code","NestedError","set","ensureRelativePathExists","destinationRelative","arrPath","split","pathAccumulated","ix","length","copyFile","sourceAbsolute","push","writeFile","fileContent","executeQueue","Promise","all"],"mappings":";;AAEA;AACA;;AAEA;;AAEA,gF;;AAEA,MAAMA,EAAE,GAAGC,YAAgBC,QAA3B;;AAEA;;;;AAIe,MAAMC,YAAN,CAAmB;;;;AAIhC;;;AAGAC,EAAAA,WAAW,CAACC,QAAD,EAAmBC,YAAnB,EAA0C;AACnD,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,YAAL,GAAoBA,YAApB;;AAEA,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACD;;AAED,QAAMC,8BAAN,CAAqCC,QAArC,EAAuD;AACrD,QAAI,CAAC,KAAKJ,WAAL,CAAiBK,GAAjB,CAAqBD,QAArB,CAAL,EAAqC;AACnC,UAAI;AACF,cAAMX,EAAE,CAACa,KAAH,CAASC,cAAKC,OAAL,CAAa,KAAKV,QAAlB,EAA4BM,QAA5B,CAAT,CAAN;AACD,OAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzB,gBAAM,IAAIC,0BAAJ;AACJ,8EADI;AAEJF,UAAAA,GAFI,CAAN;;AAID;AACF;;AAED,WAAKT,WAAL,CAAiBY,GAAjB,CAAqBR,QAArB,EAA+B,IAA/B;AACD;AACF;;AAED,QAAMS,wBAAN,CAA+BC,mBAA/B,EAA4D;AAC1D,UAAMC,OAAO,GAAGD,mBAAmB,CAACE,KAApB,CAA0B,GAA1B,CAAhB;;AAEA,SAAK,IAAIC,eAAe,GAAG,EAAtB,EAA0BC,EAAE,GAAG,CAApC,EAAuCA,EAAE,GAAGH,OAAO,CAACI,MAApD,EAA4DD,EAAE,EAA9D,EAAkE;AAChE,YAAM,KAAKf,8BAAL,CAAoCc,eAApC,CAAN;AACAA,MAAAA,eAAe,IAAIF,OAAO,CAACG,EAAD,CAAP,GAAc,GAAjC;AACD;AACF;;AAED,QAAME,QAAN,CAAeC,cAAf,EAAuCP,mBAAvC,EAAoE;AAClE,UAAM,KAAKD,wBAAL,CAA8BC,mBAA9B,CAAN;;AAEA,SAAKZ,WAAL,CAAiBoB,IAAjB,CAAsB7B,EAAE,CAAC2B,QAAH,CAAYC,cAAZ,EAA4B,KAAKvB,QAAL,GAAgB,GAAhB,GAAsBgB,mBAAlD,CAAtB;AACD;;AAED,QAAMS,SAAN,CAAgBT,mBAAhB,EAA6CU,WAA7C,EAAkE;AAChE,UAAM,KAAKX,wBAAL,CAA8BC,mBAA9B,CAAN;;AAEA,SAAKZ,WAAL,CAAiBoB,IAAjB;AACE;AACE,SAAKxB,QAAL,GAAgB,GAAhB,GAAsBgB,mBADxB;AAEE,QAFF;AAGEU,IAAAA,WAHF;AAIE,SAAKzB,YAJP,CADF;;;AAQD;;AAED,QAAM0B,YAAN,GAAqB;AACnB,UAAMC,OAAO,CAACC,GAAR,CAAY,KAAKzB,WAAjB,CAAN;AACA,SAAKA,WAAL,GAAmB,EAAnB;AACD,GA/D+B,C","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\nimport path from 'path'\n\nimport NestedError from 'nested-error-stacks'\n\nimport ensureFileContent from './ensureFileContent'\n\nconst fs = fsWithCallbacks.promises\n\n/**\n * Manages writing of multiple files\n * @class MasterWriter\n */\nexport default class MasterWriter {\n  basePath: string\n  logToConsole: boolean\n  directories: Map<string, boolean>\n  // $FlowIgnore\n  arrPromises: Array<Promise>\n\n  constructor(basePath: string, logToConsole: boolean) {\n    this.basePath = basePath\n    this.logToConsole = logToConsole\n\n    this.directories = new Map()\n    this.arrPromises = []\n  }\n\n  async ensureRelativePathExistsHelper(filePath: string) {\n    if (!this.directories.has(filePath)) {\n      try {\n        await fs.mkdir(path.resolve(this.basePath, filePath))\n      } catch (err) {\n        if (err.code !== 'EEXIST') {\n          throw new NestedError(\n            'rb-base-server MasterWriter ensureRelativePathExistsHelper: Failed',\n            err,\n          )\n        }\n      }\n\n      this.directories.set(filePath, true)\n    }\n  }\n\n  async ensureRelativePathExists(destinationRelative: string) {\n    const arrPath = destinationRelative.split('/')\n\n    for (let pathAccumulated = '', ix = 0; ix < arrPath.length; ix++) {\n      await this.ensureRelativePathExistsHelper(pathAccumulated)\n      pathAccumulated += arrPath[ix] + '/'\n    }\n  }\n\n  async copyFile(sourceAbsolute: string, destinationRelative: string) {\n    await this.ensureRelativePathExists(destinationRelative)\n\n    this.arrPromises.push(fs.copyFile(sourceAbsolute, this.basePath + '/' + destinationRelative))\n  }\n\n  async writeFile(destinationRelative: string, fileContent: string) {\n    await this.ensureRelativePathExists(destinationRelative)\n\n    this.arrPromises.push(\n      ensureFileContent(\n        this.basePath + '/' + destinationRelative,\n        null,\n        fileContent,\n        this.logToConsole,\n      ),\n    )\n  }\n\n  async executeQueue() {\n    await Promise.all(this.arrPromises)\n    this.arrPromises = []\n  }\n}\n"],"file":"MasterWriter.js"}