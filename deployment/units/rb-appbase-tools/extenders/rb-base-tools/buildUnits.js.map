{"version":3,"sources":["../../../../../units/rb-appbase-tools/extenders/rb-base-tools/buildUnits.js"],"names":["fs","fsWithCallbacks","promises","prettierESLintOptions","eslintConfig","eslintRC","prettierOptions","packageJSON","prettier","reRemoveComments","RegExp","createGraphQLSchema","units","result","schema","errors","Error","JSON","stringify","printedSchema","replace","taskPromises","path","resolve","Promise","all","createRouteFile","fileName","imports","exports","routesAppFrame","concat","text","join","createRoutes","routesAppFrameImports","routesRootImports","routesAppFrameExports","routesRootExports","unitName","endsWith","routesDir","routeFileNames","readdir","routeFileName","startsWith","route","substring","length","push","buildUnits"],"mappings":"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","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\nimport path from 'path'\n\nimport { graphql, buildSchema } from 'graphql'\nimport { getIntrospectionQuery, printSchema } from 'graphql/utilities'\nimport prettierESLint from 'prettier-eslint'\n\nimport ensureFileContent from '../../../rb-base-server/ensureFileContent'\n// $FlowIgnore Not sure why it gives an error. The file does exist\nimport eslintRC from '../../../../.eslintrc.json'\nimport fsExists from '../../../rb-base-server/fsExists'\nimport packageJSON from '../../../../package.json'\nimport schema from '../../../rb-appbase-server/graphql/schema'\n\nconst fs = fsWithCallbacks.promises\n\nconst prettierESLintOptions = { eslintConfig: eslintRC, prettierOptions: packageJSON.prettier }\n\n// It is a complete mystery to me why the comments are encased in \"\"\" but the relay\n// compiler does not like them. Either way, this sanitizes the schema and removes the comment.\nconst reRemoveComments = new RegExp('\"\"\"[^\"]*\"\"\"', 'g')\n\nasync function createGraphQLSchema(units: Array<string>) {\n  const result = await graphql(schema, getIntrospectionQuery())\n  if (result.errors)\n    throw new Error('Failed introspecting schema: ' + JSON.stringify(result.errors, null, 2))\n\n  const printedSchema = printSchema(schema).replace(reRemoveComments, '#')\n\n  const taskPromises = [\n    ensureFileContent(\n      path.resolve('./units/_configuration/rb-base-server/graphql/schema.json'),\n      null,\n      JSON.stringify(result, null, 2),\n      true,\n    ),\n    ensureFileContent(path.resolve('schema.graphql'), null, printedSchema, true),\n  ]\n\n  await Promise.all(taskPromises)\n}\n\nasync function createRouteFile(fileName: string, imports: Array<string>, exports: Array<string>) {\n  let routesAppFrame = [ '// @flow', '' ]\n  routesAppFrame = routesAppFrame.concat(imports)\n  routesAppFrame = routesAppFrame.concat([ '', 'export default [' ])\n  routesAppFrame = routesAppFrame.concat(exports)\n  routesAppFrame = routesAppFrame.concat([ ']' ])\n\n  await ensureFileContent(\n    fileName,\n    null,\n    prettierESLint({ text: routesAppFrame.join('\\r\\n'), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function createRoutes(units: Array<string>) {\n  const routesAppFrameImports = []\n  const routesRootImports = []\n  const routesAppFrameExports = []\n  const routesRootExports = []\n\n  for (let unitName of units)\n    if (unitName.endsWith('-webapp')) {\n      const routesDir = path.resolve('./units', unitName)\n      if (await fsExists(routesDir)) {\n        const routeFileNames = await fs.readdir(routesDir)\n\n        for (let routeFileName of routeFileNames) {\n          if (routeFileName.endsWith('.jsx'))\n            if (routeFileName.startsWith('routeAppFrame')) {\n              const route = routeFileName.substring(0, routeFileName.length - 4)\n              routesAppFrameImports.push(\n                'import ' + route + \" from '../../\" + unitName + '/' + route + \"'\",\n              )\n              routesAppFrameExports.push('  ' + route + ',')\n            } else if (routeFileName.startsWith('routeRoot')) {\n              const route = routeFileName.substring(0, routeFileName.length - 4)\n              routesRootImports.push(\n                'import ' + route + \" from '../../\" + unitName + '/' + route + \"'\",\n              )\n              routesRootExports.push('  ' + route + ',')\n            }\n        }\n      }\n    }\n\n  await Promise.all([\n    createRouteFile(\n      path.resolve('./units/_configuration/rb-appbase-webapp/routesAppFrame.js'),\n      routesAppFrameImports,\n      routesAppFrameExports,\n    ),\n    createRouteFile(\n      path.resolve('./units/_configuration/rb-appbase-webapp/routesRoot.js'),\n      routesRootImports,\n      routesRootExports,\n    ),\n  ])\n}\n\nexport default (async function buildUnits(units: Array<string>) {\n  const taskPromises = [ createGraphQLSchema(units), createRoutes(units) ]\n\n  await Promise.all(taskPromises)\n})\n"],"file":"buildUnits.js"}