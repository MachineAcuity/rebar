{"version":3,"sources":["../../../units/rb-appbase-webapp/client.js"],"names":["rebarErrorHandler","err","err_info","trimLeft","message","loc","window","location","host","protocol","hostname","port","body","JSON","stringify","UserToken2","stack","response","fetch","method","credentials","headers","responseAsObject","json","success","alert","issue_id","render","relayPayloads","siteConfiguration","UserToken1","__rebar_properties__","length","data","Viewer","fetcher","FetcherClient","resolver","Router","historyProtocol","BrowserProtocol","historyMiddlewares","routeConfig","contentComponent","document","href","ReactDOM","hydrate","getElementById","__rebar_error_handler__"],"mappings":"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","sourcesContent":["// @flow\n\n// In order to use ES7 async/await\nimport 'babel-polyfill'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport getGraphQLServerURL from '../_configuration/rb-appbase-webapp/getGraphQLServerURL'\nimport AppWrapper from '../_configuration/rb-appbase-webapp/AppWrapper'\n\nimport FetcherClient from './fetcherClient'\nimport { createResolver, historyMiddlewares, routeConfig } from './router'\nimport { getUserToken2, setUserToken2 } from './scripts/userToken2'\n\nimport BrowserProtocol from 'farce/BrowserProtocol'\nimport createInitialFarceRouter from 'found/createInitialFarceRouter'\nimport createRender from 'found/createRender'\n\n// Include global CSS used in all units. Will not be chunked\nimport '../_configuration/rb-appbase-webapp/global.css'\n\n// Handler for error reporting\nasync function rebarErrorHandler(err: Error, err_info) {\n  try {\n    // Do not report errors that do not carry meaningful information\n    if (typeof err === 'string') {\n      if (err.trimLeft() === '') return\n    } else {\n      if (err.message == null) {\n        return\n      }\n\n      if (typeof err.message === 'string' && err.message.trimLeft() === '') {\n        return\n      }\n\n      // if (\n      //   typeof err.message === 'string' &&\n      //   err.message.startsWith(\n      //     'An error was thrown inside one of your components, but React does not know what it was.',\n      //   )\n      // )\n      //   return\n    }\n\n    // Determine the host server\n    const loc = window.location\n    const host = loc.protocol + '//' + loc.hostname + ':' + loc.port\n\n    // Pakcage up error details\n    const body = JSON.stringify({\n      UserToken2: getUserToken2(),\n      err: { message: err.message, stack: err.stack },\n      err_info,\n    })\n\n    // Send away\n    const response = await fetch(host + '/client-error/report', {\n      method: 'POST',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body,\n    })\n\n    // Inform user of the result\n    const responseAsObject = await response.json()\n    if (responseAsObject.success) {\n      alert(\n        'An error has occurred. Use the following identifier when reporting to support:\\n' +\n          responseAsObject.issue_id,\n      )\n    } else {\n      alert('An error has occurred. Attempt to assign an identifier has failed.')\n    }\n  } catch (err) {\n    alert('An error has occurred. We were not able to assign an identifier to it.\\nReason:' + err)\n  }\n}\n\n// Load up react, relay and set up error handling\n\nconst render = createRender({})\n;(async () => {\n  const { relayPayloads, siteConfiguration, UserToken1 } = window.__rebar_properties__\n\n  // It is critical that the app frame has UserToken2 retrieved. In the case of a rendering error like\n  // 404 relaypayloads will be empty\n  if (relayPayloads.length > 0) {\n    setUserToken2(relayPayloads[0].data.Viewer.UserToken2)\n  }\n\n  // eslint-disable-next-line no-underscore-dangle\n  const fetcher = new FetcherClient(\n    getGraphQLServerURL(),\n    relayPayloads,\n    UserToken1,\n    getUserToken2(),\n  )\n  const resolver = createResolver(fetcher)\n\n  const Router = await createInitialFarceRouter({\n    historyProtocol: new BrowserProtocol(),\n    historyMiddlewares,\n    routeConfig: routeConfig(siteConfiguration),\n    resolver,\n    render,\n  })\n\n  const contentComponent = (\n    <AppWrapper siteConfiguration={siteConfiguration} url={document.location.href}>\n      <Router resolver={resolver} />\n    </AppWrapper>\n  )\n  ReactDOM.hydrate(\n    contentComponent,\n    // $FlowIgnore\n    document.getElementById('root'),\n    () => {\n      // IDEA [Code Quality] Research if removal of styles if necessary\n      // Previous version of react required removing of JSS styles but the new one seems to handle\n      // them OK.\n      // // We don't need the static css any more once we have launched our application.\n      // const ssStyles = document.getElementById( 'server-side-styles' )\n      // ssStyles.parentNode.removeChild( ssStyles )\n    },\n  )\n\n  window.__rebar_error_handler__ = rebarErrorHandler\n})()\n"],"file":"client.js"}