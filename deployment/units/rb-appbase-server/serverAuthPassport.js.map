{"version":3,"sources":["../../../units/rb-appbase-server/serverAuthPassport.js"],"names":["require","config","envJWTSecret","process","env","JWT_SECRET","Error","envAccessControlAllowedOrigins","ACCESS_CONTROL_ALLOWED_ORIGINS","publicUrl","NODE_ENV","JSON","parse","envRebarDataFilesLocation","REBAR_DATA_FILES_LOCATION","userFileLocation","path","resolve","serverAuthPassport","use","bodyParser","json","req","res","next","requestLoggerAuth","passportReturn","profileData","cb","uponAuthenticationSuccess","step","profile","user","objectManager","siteInformation","UserAccount_Identifier","id","a_UserAccount","getOneObject_async","a_UserSession","setViewerUserId","UserAccount_User_id","UserSession_artifact_id","artifact_id","UserSession_User_id","UserSession_Start","Date","UserSession_Expired","UserSession_IsAnonymous","add","a_User","Object","assign","User_artifact_id","UserToken2","Math","random","toString","substring","User_DisplayName","displayName","User_PrimaryEmail","email","assignPrimaryKey","UserAccount_artifact_id","UserAccount_Secret","UserAccount_Type","Promise","all","profilePhotoUrl","viewerUserIDAsString","getViewerUserId","usersDirectory","userGroupDirectory","userDirectory","profileDirectory","localImageFileName","fetchedFile","localFileStream","fs","createWriteStream","body","pipe","injectedByRebarFrameworks","userSession","UserToken1","jwt","encode","session_id","cookie","httpOnly","maxAge","redirect","err","status","send","stringify","error","passport","serializeUser","deserializeUser","obj","initialize","authPassportConfiguration","twitter","disabled","secret","SESSION_SECRET","passportFacebook","Strategy","clientID","AUTH_FACEBOOK_APP_ID","clientSecret","AUTH_FACEBOOK_APP_SECRET","callbackURL","profileFields","accessToken","refreshToken","photos","value","get","authenticate","failureRedirect","google","passportGoogle","AUTH_GOOGLE_CLIENT_ID","AUTH_GOOGLE_CLIENT_SECRET","scope","passportTwitter","consumerKey","AUTH_TWITTER_CONSUMER_KEY","consumerSecret","AUTH_TWITTER_CONSUMER_SECRET"],"mappings":"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","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport path from 'path'\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport expressSession from 'express-session'\nimport jwt from 'jwt-simple'\nimport fetch from 'node-fetch'\nimport passport from 'passport'\nimport passportFacebook from 'passport-facebook'\nimport passportGoogle from 'passport-google-oauth20'\nimport passportTwitter from 'passport-twitter'\n\nimport authPassportConfiguration from '../_configuration/rb-appbase-universal/authPassportConfiguration'\nimport getNewUser from '../_configuration/rb-base-server/graphql/model/getNewUser'\nimport ensurePathExists from '../rb-base-server/ensurePathExists'\nimport log from '../rb-base-server/log'\nimport onCreateUser from '../_configuration/rb-appbase-server/onCreateUser'\nimport { requestLoggerAuth } from '../_configuration/rb-base-server/requestLoggers'\nimport logServerRequest from '../rb-base-server/logServerRequest'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\n\n// Read environment\nrequire('dotenv').config()\n\nconst envJWTSecret = process.env.JWT_SECRET\nif (envJWTSecret == null || typeof envJWTSecret !== 'string')\n  throw new Error(\n    'Error: rb-appbase-server/serverAuthPassport requires the environment variable JWT_SECRET to be set',\n  )\n\nconst envAccessControlAllowedOrigins = process.env.ACCESS_CONTROL_ALLOWED_ORIGINS\nif (envAccessControlAllowedOrigins == null || typeof envAccessControlAllowedOrigins !== 'string')\n  throw new Error(\n    'Error: rb-appbase-server/serverAuthPassport requires the environment variable ACCESS_CONTROL_ALLOWED_ORIGINS to be set',\n  )\n\nconst publicUrl =\n  process.env.NODE_ENV === 'production'\n    ? // In production, use the public URL as the creator intended\n      JSON.parse(envAccessControlAllowedOrigins)[0]\n    : // When running in development locally use localhost. This allows to\n      // properly work with the likes of facebook without changing the settings in the app\n      // dashboard every time the IP changes\n      'http://localhost:28603' // IDEA [Code Quality] Use port setting here\n\nconst envRebarDataFilesLocation = process.env.REBAR_DATA_FILES_LOCATION\nif (envRebarDataFilesLocation == null || typeof envRebarDataFilesLocation !== 'string')\n  throw new Error(\n    'Error: Machine Acuity unit requires environment variable REBAR_DATA_FILES_LOCATION to be set',\n  )\n\nconst userFileLocation = path.resolve(envRebarDataFilesLocation, 'user')\n\n//\n\nconst serverAuthPassport = express()\n\nserverAuthPassport.use(bodyParser.json())\nserverAuthPassport.use((req, res, next) => logServerRequest(req, res, next, requestLoggerAuth))\n\n//\n\nfunction passportReturn(profileData, cb) {\n  return cb(null, profileData)\n}\n\nasync function uponAuthenticationSuccess(req, res) {\n  let step = 'initialize'\n\n  try {\n    const profile = req.user\n\n    // $FlowIgnore yes, the Object Manager will have all the fields\n    const objectManager = await getObjectManager(req, res)\n\n    if (!objectManager.siteInformation) {\n      throw new Error('Site information not found')\n    }\n\n    step = 'Check if third party account already exists'\n    const UserAccount_Identifier = req.user.id\n\n    let a_UserAccount = await objectManager.getOneObject_async('UserAccount', {\n      UserAccount_Identifier,\n    })\n    let a_UserSession = null\n\n    if (a_UserAccount != null) {\n      step = 'Get user for passport identity that has been found'\n\n      // ObjectManager will try to set the create_by and modified_by fields. In order to do this it needs\n      // the viewer user id to be set\n      objectManager.setViewerUserId(a_UserAccount.UserAccount_User_id)\n\n      step = 'Create user session object'\n      a_UserSession = {\n        UserSession_artifact_id: objectManager.siteInformation.artifact_id, // Get previously assigned primary key\n        UserSession_User_id: a_UserAccount.UserAccount_User_id,\n        UserSession_Start: new Date(),\n        UserSession_Expired: false,\n        UserSession_IsAnonymous: false,\n      }\n\n      await objectManager.add('UserSession', a_UserSession)\n    } else {\n      step = 'Create the a new user object'\n      const a_User = Object.assign(getNewUser(objectManager.siteInformation.artifact_id), {\n        User_artifact_id: objectManager.siteInformation.artifact_id,\n        UserToken2:\n          Math.random().toString(36).substring(2) +\n          Math.random().toString(36).substring(2) +\n          Math.random().toString(36).substring(2) +\n          Math.random().toString(36).substring(2),\n        User_DisplayName: profile.displayName,\n        User_PrimaryEmail: profile.email ? profile.email : '',\n      })\n\n      objectManager.assignPrimaryKey('User', a_User)\n      objectManager.setViewerUserId(a_User.id)\n\n      step = 'Create the user session object'\n      a_UserSession = {\n        UserSession_artifact_id: objectManager.siteInformation.artifact_id,\n        // Get previously assigned primary key\n        UserSession_User_id: a_User.id,\n        UserSession_Start: new Date(),\n        UserSession_Expired: false,\n        UserSession_IsAnonymous: false,\n      }\n\n      step = 'Create the user account object'\n      a_UserAccount = {\n        UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n        // Get previously assigned primary key\n        UserAccount_User_id: a_User.id,\n        UserAccount_Identifier,\n        UserAccount_Secret: '',\n        UserAccount_Type: 'pasp',\n      }\n\n      step = 'Add user session and account to database'\n      await Promise.all([\n        objectManager.add('User', a_User),\n        objectManager.add('UserSession', a_UserSession),\n        objectManager.add('UserAccount', a_UserAccount),\n        ...onCreateUser(a_User.id, objectManager),\n      ])\n\n      step = 'Download profile image'\n      if (profile.profilePhotoUrl) {\n        const viewerUserIDAsString = objectManager.getViewerUserId().toString()\n\n        // Create directory\n        const usersDirectory = path.resolve(userFileLocation)\n        const userGroupDirectory = path.resolve(\n          usersDirectory,\n          viewerUserIDAsString.substring(0, 2),\n        )\n        const userDirectory = path.resolve(userGroupDirectory, viewerUserIDAsString)\n        const profileDirectory = path.resolve(userDirectory, 'profile')\n\n        await ensurePathExists(usersDirectory)\n        await ensurePathExists(userGroupDirectory)\n        await ensurePathExists(userDirectory)\n        await ensurePathExists(profileDirectory)\n\n        const localImageFileName = path.resolve(profileDirectory, 'photo.jpg')\n\n        const fetchedFile = await fetch(profile.profilePhotoUrl)\n        const localFileStream = fs.createWriteStream(localImageFileName)\n        fetchedFile.body.pipe(localFileStream)\n      }\n    }\n\n    step = 'Check if user exists or has been created'\n    if (a_UserSession != null) {\n      res.injectedByRebarFrameworks = { userSession: a_UserSession }\n\n      step = 'Create JWT token'\n      const UserToken1 = jwt.encode(\n        // $FlowIgnore - id will be filled in by ObjectManager.add\n        { session_id: a_UserSession.id },\n        envJWTSecret,\n      )\n\n      res.cookie('UserToken1', UserToken1, {\n        httpOnly: true,\n        maxAge: 30 * 24 * 60 * 60 * 1000,\n      })\n\n      // step = 'Create user token 2'\n      // const a_User = await objectManager.getOneObject_async('User', {\n      //   User_artifact_id: objectManager.siteInformation.artifact_id,\n      //   id: a_UserAccount.UserAccount_User_id,\n      // })\n      // const { UserToken2 } = a_User\n\n      step = 'Respond with success'\n      res.redirect('/')\n    } else {\n      res.redirect('/error_login')\n    }\n  } catch (err) {\n    log(\n      'error',\n      'rb-appbase-server serverAuthPassport authenticating through third party: Failed',\n      {\n        step,\n        err,\n      },\n    )\n    res.status(500).send(\n      JSON.stringify({\n        error: 'An error has occurred while authenticating through third party',\n      }),\n    )\n  }\n}\n\n// Passport sessions will not be used, so both serialize and deserialize do nothing\npassport.serializeUser(function(user, cb) {\n  cb(null, user)\n})\n\npassport.deserializeUser(function(obj, cb) {\n  cb(null, obj)\n})\n\n// Now initialize it and use it on router\nserverAuthPassport.use(passport.initialize())\n\n// IDEA [Project E] Are there any security/scalability/web farm issues with using user session?\n// Session is only required by twitter strategy\nif (authPassportConfiguration.twitter && !authPassportConfiguration.twitter.disabled)\n  serverAuthPassport.use(\n    expressSession({\n      secret: process.env.SESSION_SECRET,\n    }),\n  )\n\nif ('facebook' in authPassportConfiguration) {\n  // Facebook strategy for web\n  passport.use(\n    new passportFacebook.Strategy(\n      {\n        clientID: process.env.AUTH_FACEBOOK_APP_ID,\n        clientSecret: process.env.AUTH_FACEBOOK_APP_SECRET,\n        callbackURL: publicUrl + '/auth/facebook/return',\n        profileFields: [ 'id', 'displayName', 'picture.type(large)', 'email' ],\n      },\n      (accessToken, refreshToken, profile, cb) => {\n        // Locate profile photo URL\n        let profilePhotoUrl = null\n        if (profile.photos && profile.photos[0] && profile.photos[0].value) {\n          profilePhotoUrl = profile.photos[0].value\n        }\n\n        return passportReturn(\n          {\n            displayName: profile.displayName,\n            email: profile.email,\n            id: 'facebook-,-' + profile.id,\n            profilePhotoUrl,\n          },\n          cb,\n        )\n      },\n    ),\n  )\n\n  serverAuthPassport.get('/facebook', passport.authenticate('facebook'))\n  serverAuthPassport.get(\n    '/facebook/return',\n    passport.authenticate('facebook', {\n      failureRedirect: '/login',\n    }),\n    uponAuthenticationSuccess,\n  )\n}\n\nif (authPassportConfiguration.google && !authPassportConfiguration.google.disabled) {\n  passport.use(\n    new passportGoogle.Strategy(\n      {\n        clientID: process.env.AUTH_GOOGLE_CLIENT_ID,\n        clientSecret: process.env.AUTH_GOOGLE_CLIENT_SECRET,\n        callbackURL: publicUrl + '/auth/google/return',\n      },\n      (accessToken, refreshToken, profile, cb) => {\n        // Locate profile photo URL\n        let profilePhotoUrl = null\n        if (profile.photos && profile.photos[0] && profile.photos[0].value) {\n          profilePhotoUrl = profile.photos[0].value\n        }\n\n        return passportReturn(\n          {\n            id: 'google-,-' + profile.id,\n            displayName: profile.displayName,\n            email: null,\n            profilePhotoUrl,\n          },\n          cb,\n        )\n      },\n    ),\n  )\n\n  serverAuthPassport.get(\n    '/google',\n    passport.authenticate('google', {\n      scope: [ 'profile' ],\n    }),\n  )\n  serverAuthPassport.get(\n    '/google/return',\n    passport.authenticate('google', {\n      failureRedirect: '/login',\n    }),\n    uponAuthenticationSuccess,\n  )\n}\n\nif (authPassportConfiguration.twitter && !authPassportConfiguration.twitter.disabled) {\n  passport.use(\n    new passportTwitter.Strategy(\n      {\n        consumerKey: process.env.AUTH_TWITTER_CONSUMER_KEY,\n        consumerSecret: process.env.AUTH_TWITTER_CONSUMER_SECRET,\n        callbackURL: publicUrl + '/auth/twitter/return',\n      },\n      (accessToken, refreshToken, profile, cb) =>\n        passportReturn(\n          {\n            id: 'twitter-,-' + profile.id,\n            displayName: profile.displayName,\n          },\n          cb,\n        ),\n    ),\n  )\n\n  serverAuthPassport.get(\n    '/twitter',\n    passport.authenticate('twitter', {\n      scope: [ 'profile' ],\n    }),\n  )\n  serverAuthPassport.get(\n    '/twitter/return',\n    passport.authenticate('twitter', {\n      failureRedirect: '/login',\n    }),\n    uponAuthenticationSuccess,\n  )\n}\n\nexport default serverAuthPassport\n"],"file":"serverAuthPassport.js"}