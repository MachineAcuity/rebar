{"version":3,"sources":["../../../units/rb-appbase-server/serverAuth.js"],"names":["require","config","envJWTSecret","process","env","JWT_SECRET","Error","serverAuth","use","bodyParser","json","req","res","next","requestLoggerAuth","login","step","objectManager","siteInformation","UserAccount_Identifier","body","toLowerCase","User_Secret","arr_UserAccount","getObjectList_async","UserAccount_artifact_id","artifact_id","UserAccount_Type","length","status","error","a_UserAccount","Promise","resolve","bcryptjs","compare","UserAccount_Secret","err","passwordMatch","setViewerUserId","UserAccount_User_id","a_UserSession","UserSession_artifact_id","UserSession_User_id","UserSession_Start","Date","UserSession_Expired","UserSession_IsAnonymous","add","injectedByRebarFrameworks","userSession","UserToken1","jwt","encode","session_id","id","cookie","httpOnly","maxAge","a_User","getOneObject_async","User_artifact_id","UserToken2","success","send","JSON","stringify","post","createuser","hash","accountNameIsValidEmail","User_PrimaryEmail","Object","assign","Math","random","toString","substring","User_DisplayName","assignPrimaryKey","all","changeSecret","User_CurrentSecret","User_NewSecret","update","logout","UserSession","remove","expires"],"mappings":"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","sourcesContent":["// @flow\n\nimport bcryptjs from 'bcryptjs'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport jwt from 'jwt-simple'\n\nimport delayPromise from '../rb-base-universal/delayPromise'\nimport getNewUser from '../_configuration/rb-base-server/graphql/model/getNewUser'\nimport log from '../rb-base-server/log'\nimport onCreateUser from '../_configuration/rb-appbase-server/onCreateUser'\nimport { validateEmail } from '../rb-base-universal/validation'\nimport { requestLoggerAuth } from '../_configuration/rb-base-server/requestLoggers'\nimport logServerRequest from '../rb-base-server/logServerRequest'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\n\nimport { getUserAndSessionIDByUserToken1_async } from './checkCredentials'\n\n// Read environment\nrequire('dotenv').config()\n\nconst envJWTSecret = process.env.JWT_SECRET\nif (envJWTSecret == null || typeof envJWTSecret !== 'string')\n  throw new Error(\n    'Error: rb-appbase-server/serverAuth requires the environment variable JWT_SECRET to be set',\n  )\n\n//\n\nconst serverAuth = express()\n\nserverAuth.use(bodyParser.json())\nserverAuth.use((req, res, next) => logServerRequest(req, res, next, requestLoggerAuth))\n\n// IDEA [Code Quality] When logging in as a different user, logout of the old session should be performed first so that the session is deleted.\n\n//\n\nasync function login(req, res) {\n  let step = 'initialize'\n\n  try {\n    // $FlowIgnore yes, the Object Manager will have all the fields\n    const objectManager = await getObjectManager(req, res)\n\n    if (!objectManager.siteInformation) {\n      throw new Error('Site information not found')\n    }\n\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    await delayPromise(1000) // Wait for a second to hamper a possible potential brute force attack\n\n    step = 'Find user'\n\n    const arr_UserAccount = await objectManager.getObjectList_async('UserAccount', {\n      UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n      UserAccount_Identifier,\n      UserAccount_Type: 'sec',\n    })\n\n    if (arr_UserAccount.length === 0) {\n      res.status(401).json({ error: 'User account not found' })\n      return\n    }\n\n    // Use first user found, there should be only one anyway\n    const a_UserAccount = arr_UserAccount[0]\n\n    step = 'Check password'\n    if (\n      !await new Promise((resolve) =>\n        bcryptjs.compare(User_Secret, a_UserAccount.UserAccount_Secret, (err, passwordMatch) =>\n          resolve(passwordMatch),\n        ),\n      )\n    ) {\n      res.status(401).json({ error: 'Incorrect password' })\n      return\n    }\n\n    // ObjectManager will try to set the create_by and modified_by fields. In order to do this it needs\n    // the viewer user id to be set\n    objectManager.setViewerUserId(a_UserAccount.UserAccount_User_id)\n\n    step = 'Create user session object'\n    const a_UserSession = {\n      UserSession_artifact_id: objectManager.siteInformation.artifact_id, // Get previously assigned primary key\n      UserSession_User_id: a_UserAccount.UserAccount_User_id,\n      UserSession_Start: new Date(),\n      UserSession_Expired: false,\n      UserSession_IsAnonymous: false,\n    }\n\n    // Add session to database\n    await objectManager.add('UserSession', a_UserSession)\n    res.injectedByRebarFrameworks = { userSession: a_UserSession }\n\n    step = 'Create JWT token'\n    const UserToken1 = jwt.encode(\n      // $FlowIgnore - id will be filled in by ObjectManager.add\n      { session_id: a_UserSession.id },\n      envJWTSecret,\n    )\n\n    res.cookie('UserToken1', UserToken1, {\n      httpOnly: true,\n      maxAge: 30 * 24 * 60 * 60 * 1000,\n    })\n\n    step = 'Create user token 2'\n    const a_User = await objectManager.getOneObject_async('User', {\n      User_artifact_id: objectManager.siteInformation.artifact_id,\n      id: a_UserAccount.UserAccount_User_id,\n    })\n    const { UserToken2 } = a_User\n\n    step = 'Respond with success'\n    res.json({ success: true, UserToken2 })\n  } catch (err) {\n    log('error', 'rb-appbase-server serverAuth login: Failed', { step, err })\n    res.status(500).send(\n      JSON.stringify({\n        error: 'An error has occurred while attempting login',\n      }),\n    )\n  }\n}\nserverAuth.post('/login', login)\n\nasync function createuser(req, res) {\n  let step = 'initialize'\n\n  try {\n    const objectManager = await getObjectManager(req, res)\n\n    if (!objectManager.siteInformation) {\n      throw new Error('Site information not found')\n    }\n\n    step = 'Get user account'\n    const UserAccount_Identifier = req.body.UserAccount_Identifier.toLowerCase()\n    const User_Secret = req.body.User_Secret\n\n    if (UserAccount_Identifier === '' || User_Secret === '') {\n      throw new Error('Attempted log in with empty account identifier or password')\n    }\n\n    const arr_UserAccount = await objectManager.getObjectList_async('UserAccount', {\n      UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n      UserAccount_Identifier,\n    })\n\n    if (arr_UserAccount.length > 0) {\n      res.status(500).send(\n        JSON.stringify({\n          error: 'User account already exists',\n        }),\n      )\n    }\n\n    step = 'Create user account secret'\n    const UserAccount_Secret = await new Promise((resolve) =>\n      bcryptjs.hash(User_Secret, 8, (err, hash) => resolve(hash)),\n    )\n\n    // If account name looks like email address, use it as email\n    const accountNameIsValidEmail = validateEmail(UserAccount_Identifier)\n    const User_PrimaryEmail = accountNameIsValidEmail ? UserAccount_Identifier : ''\n\n    step = 'Create the new user object'\n    const a_User = Object.assign(getNewUser(objectManager.siteInformation.artifact_id), {\n      User_artifact_id: objectManager.siteInformation.artifact_id,\n      UserToken2:\n        Math.random().toString(36).substring(2) +\n        Math.random().toString(36).substring(2) +\n        Math.random().toString(36).substring(2) +\n        Math.random().toString(36).substring(2),\n      User_DisplayName: UserAccount_Identifier,\n      User_PrimaryEmail: User_PrimaryEmail,\n    })\n    objectManager.assignPrimaryKey('User', a_User)\n    objectManager.setViewerUserId(a_User.id)\n\n    step = 'Create the user session object'\n    const a_UserSession = {\n      UserSession_artifact_id: objectManager.siteInformation.artifact_id,\n      // Get previously assigned primary key\n      UserSession_User_id: a_User.id,\n      UserSession_Start: new Date(),\n      UserSession_Expired: false,\n      UserSession_IsAnonymous: false,\n    }\n\n    step = 'Create the user account object'\n    const a_UserAccount = {\n      UserAccount_artifact_id: objectManager.siteInformation.artifact_id,\n      // Get previously assigned primary key\n      UserAccount_User_id: a_User.id,\n      UserAccount_Identifier,\n      UserAccount_Secret,\n      UserAccount_Type: 'sec',\n    }\n\n    step = 'Add user session and account to database'\n    await Promise.all([\n      objectManager.add('User', a_User),\n      objectManager.add('UserSession', a_UserSession),\n      objectManager.add('UserAccount', a_UserAccount),\n      ...onCreateUser(a_User.id, objectManager),\n    ])\n\n    res.injectedByRebarFrameworks = { userSession: a_UserSession }\n\n    step = 'Create a JWT token'\n    const UserToken1 = jwt.encode(\n      // $FlowIgnore - id will be filled in by ObjectManager.add\n      { session_id: a_UserSession.id },\n      envJWTSecret,\n    )\n\n    step = 'Set user token 1 cookie'\n    res.cookie('UserToken1', UserToken1, {\n      httpOnly: true,\n      maxAge: 30 * 24 * 60 * 60 * 1000,\n    })\n\n    step = 'Respond with success'\n    res.json({ success: true })\n  } catch (err) {\n    log('error', 'rb-appbase-server serverAuth create user: Failed', {\n      step,\n      err,\n    })\n    res.status(500).send(\n      JSON.stringify({\n        error: 'An error has occurred while attempting to create new user',\n      }),\n    )\n  }\n}\nserverAuth.post('/createuser', createuser)\n\nasync function changeSecret(req, res) {\n  let step = 'initialize'\n\n  try {\n    const objectManager = await getObjectManager(req, res)\n\n    step = 'Verify that caller is a correctly logged in user'\n    await getUserAndSessionIDByUserToken1_async(objectManager, req, false)\n\n    step = 'Locate user account'\n    // user id and artifact id will be picked up from object manager\n    const arr_UserAccount = await objectManager.getObjectList_async('UserAccount', {\n      UserAccount_Type: 'sec',\n    })\n\n    if (arr_UserAccount.length === 0) {\n      res.status(401).json({ error: 'User account not found' })\n      return\n    }\n\n    // Use first user found, there should be only one anyway\n    const a_UserAccount = arr_UserAccount[0]\n\n    step = 'Verify the current user secret'\n    const { User_CurrentSecret } = req.body\n    if (\n      !await new Promise((resolve) =>\n        bcryptjs.compare(\n          User_CurrentSecret,\n          a_UserAccount.UserAccount_Secret,\n          (err, passwordMatch) => resolve(passwordMatch),\n        ),\n      )\n    ) {\n      res.status(401).json({ error: 'Incorrect current password' })\n      return\n    }\n\n    step = 'Hash the new user secret'\n    const { User_NewSecret } = req.body\n    const UserAccount_Secret = await new Promise((resolve) =>\n      bcryptjs.hash(User_NewSecret, 8, (err, hash) => resolve(hash)),\n    )\n\n    step = 'Write new secret hash to db'\n    a_UserAccount.UserAccount_Secret = UserAccount_Secret\n    await objectManager.update('UserAccount', a_UserAccount)\n\n    res.json({ success: true })\n  } catch (err) {\n    log('error', 'rb-appbase-server serverAuth change-secret: Failed', {\n      err,\n      step,\n    })\n    res.status(500).send(\n      JSON.stringify({\n        error: 'An error has occurred while attempting to change password',\n      }),\n    )\n  }\n}\nserverAuth.post('/change-secret', changeSecret)\n\nasync function logout(req, res) {\n  try {\n    const objectManager = await getObjectManager(req, res)\n\n    // Notice that get user and session will return null if user is not found, hence the next line would\n    // fail. This is OK because we have a catch in the end.\n    const userSession = (await getUserAndSessionIDByUserToken1_async(objectManager, req, false))\n      .UserSession\n\n    await objectManager.remove('UserSession', {\n      id: userSession.id,\n    })\n\n    res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n    res.json({ success: true })\n  } catch (err) {\n    log('error', 'rb-appbase-server serverAuth logout: Failed', { err })\n    res.status(500).send(\n      JSON.stringify({\n        error: 'An error has occurred while attempting to log out',\n      }),\n    )\n  }\n}\nserverAuth.post('/logout', logout)\n\nexport default serverAuth\n"],"file":"serverAuth.js"}