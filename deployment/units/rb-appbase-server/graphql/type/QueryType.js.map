{"version":3,"sources":["../../../../../units/rb-appbase-server/graphql/type/QueryType.js"],"names":["resolveNodeField","source","args","context","rootValue","ec","objectManager","om","id","type","getOneObject_async","GraphQLObjectType","name","fields","node","NodeInterface","GraphQLNonNull","GraphQLID","resolve","Viewer","ViewerType","parent","getViewerUserId"],"mappings":";;AAEA;AACA;;AAEA;AACA;;AAEA,kE;;AAEA;;AAEA,SAASA,gBAAT,CAA0BC,MAA1B,EAAkCC,IAAlC,EAAwCC,OAAxC,EAAiD,EAAEC,SAAS,EAAEC,EAAb,EAAjD,EAAoE;AAClE,QAAMC,aAA4B,GAAGD,EAAE,CAACE,EAAH,EAArC;AACA;AACA;AACA;AACA,QAAM,EAAEC,EAAF,EAAMC,IAAN,KAAe,gCAAaP,IAAI,CAACM,EAAlB,CAArB;;AAEA;AACA;AACA,MAAIC,IAAI,KAAK,QAAb,EAAuB,OAAOH,aAAa,CAACI,kBAAd,CAAiC,MAAjC,EAAyC,EAAEF,EAAE,EAAEA,EAAN,EAAzC,CAAP,CAAvB;AACK,SAAOF,aAAa,CAACI,kBAAd,CAAiCD,IAAjC,EAAuC,EAAED,EAAE,EAAEA,EAAN,EAAvC,CAAP;AACN;;AAED;;AAEe,IAAIG,0BAAJ,CAAsB;AACnCC,EAAAA,IAAI,EAAE,OAD6B;AAEnCC,EAAAA,MAAM,EAAE,OAAO;AACbC,IAAAA,IAAI,EAAE;AACJL,MAAAA,IAAI,EAAEM,sBADF;AAEJb,MAAAA,IAAI,EAAE;AACJM,QAAAA,EAAE,EAAE,EAAEC,IAAI,EAAE,IAAIO,uBAAJ,CAAmBC,kBAAnB,CAAR,EADA,EAFF;;AAKJC,MAAAA,OAAO,EAAElB,gBALL,EADO;;AAQbmB,IAAAA,MAAM,EAAE;AACNV,MAAAA,IAAI,EAAEW,mBADA;AAENF,MAAAA,OAAO,EAAE,CAACG,MAAD,EAASnB,IAAT,EAAeC,OAAf,EAAwB,EAAEC,SAAS,EAAEC,EAAb,EAAxB,KAA8C;AACrD,cAAMC,aAA4B,GAAGD,EAAE,CAACE,EAAH,EAArC;AACA,eAAOD,aAAa,CAACI,kBAAd,CAAiC,MAAjC,EAAyC,EAAEF,EAAE,EAAEF,aAAa,CAACgB,eAAd,EAAN,EAAzC,CAAP;AACD,OALK,EARK,EAAP,CAF2B,EAAtB,C","sourcesContent":["// @flow\n\nimport { fromGlobalId } from 'graphql-relay'\nimport { GraphQLID, GraphQLNonNull, GraphQLObjectType } from 'graphql'\n\nimport NodeInterface from '../NodeInterface'\nimport ObjectManager from '../../../rb-base-server/ObjectManager'\n\nimport ViewerType from './ViewerType'\n\n//\n\nfunction resolveNodeField(source, args, context, { rootValue: ec }) {\n  const objectManager: ObjectManager = ec.om()\n  // the node field will receive a globally\n  // unique id, and here we convert that back\n  // to the local type and id\n  const { id, type } = fromGlobalId(args.id)\n\n  // map the local type and id into the\n  // actual data for the record\n  if (type === 'Viewer') return objectManager.getOneObject_async('User', { id: id })\n  else return objectManager.getOneObject_async(type, { id: id })\n}\n\n//\n\nexport default new GraphQLObjectType({\n  name: 'Query',\n  fields: () => ({\n    node: {\n      type: NodeInterface,\n      args: {\n        id: { type: new GraphQLNonNull(GraphQLID) },\n      },\n      resolve: resolveNodeField,\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: ec }) => {\n        const objectManager: ObjectManager = ec.om()\n        return objectManager.getOneObject_async('User', { id: objectManager.getViewerUserId() })\n      },\n    },\n  }),\n})\n"],"file":"QueryType.js"}