{"version":3,"sources":["../../../../units/rb-appbase-server/graphql/graphQLError.js"],"names":["Processed","Symbol","IsUserError","UserError","Error","constructor","args","name","message","captureStackTrace","defaultHandler","err","setDefaultHandler","handlerFn","maskErrors","thing","fn","GraphQLSchema","maskSchema","GraphQLObjectType","maskType","maskField","field","resolveFn","resolve","out","call","Promise","e","_resolveFn","type","getFields","fields","fieldName","Object","hasOwnProperty","schema","types","getTypeMap","typeName"],"mappings":"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","sourcesContent":["// @flow\n// This is a modified version of: https://github.com/kadirahq/graphql-errors/blob/master/lib/index.js\n\n//import uuid from 'uuid';\nimport { GraphQLObjectType, GraphQLSchema } from 'graphql'\n\nimport log from '../../rb-base-server/log'\n\n// Mark field/type/schema\nexport const Processed = Symbol()\n\n// Used to identify UserErrors\nexport const IsUserError = Symbol()\n\n// UserErrors will be sent to the user\nexport class UserError extends Error {\n  // $FlowIgnore\n  constructor(...args) {\n    super(...args)\n    this.name = 'Error'\n    this.message = args[0]\n\n    // $FlowIgnore\n    this[IsUserError] = true\n\n    Error.captureStackTrace(this, 'Error')\n  }\n}\n\n// Modifies errors before sending to the user\nexport let defaultHandler = function(err: any) {\n  if (err[IsUserError]) {\n    return err\n  }\n\n  log('error', 'rb-appbase-server graphQLError', { err })\n\n  return new Error('GraphQL internal error')\n}\n\n// Changes the default error handler function\nexport function setDefaultHandler(handlerFn: any) {\n  defaultHandler = handlerFn\n}\n\n// Masks graphql schemas, types or individual fields\nexport function maskErrors(thing: any, fn: any = defaultHandler) {\n  if (thing instanceof GraphQLSchema) {\n    maskSchema(thing, fn)\n  } else if (thing instanceof GraphQLObjectType) {\n    maskType(thing, fn)\n  } else {\n    maskField(thing, fn)\n  }\n}\n\nfunction maskField(field, fn) {\n  const resolveFn = field.resolve\n  if (field[Processed] || !resolveFn) {\n    return\n  }\n\n  field[Processed] = true\n  field.resolve = async function(...args) {\n    try {\n      const out = resolveFn.call(this, ...args)\n      return await Promise.resolve(out)\n    } catch (e) {\n      throw fn(e)\n    }\n  }\n\n  // save the original resolve function\n  field.resolve._resolveFn = resolveFn\n}\n\nfunction maskType(type, fn) {\n  if (type[Processed] || !type.getFields) {\n    return\n  }\n\n  const fields = type.getFields()\n  for (const fieldName in fields) {\n    if (!Object.hasOwnProperty.call(fields, fieldName)) {\n      continue\n    }\n\n    maskField(fields[fieldName], fn)\n  }\n}\n\nfunction maskSchema(schema, fn) {\n  const types = schema.getTypeMap()\n  for (const typeName in types) {\n    if (!Object.hasOwnProperty.call(types, typeName)) {\n      continue\n    }\n\n    maskType(types[typeName], fn)\n  }\n}\n"],"file":"graphQLError.js"}