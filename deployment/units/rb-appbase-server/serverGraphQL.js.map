{"version":3,"sources":["../../../units/rb-appbase-server/serverGraphQL.js"],"names":["serverGraphQL","use","bodyParser","json","req","res","next","requestLoggerGraphQL","graphQLError","message","JSON","stringify","errors","locations","line","column","stack","path","data","root","objectManager","ixTry","UserAndSession","status","send","a_User","User","a_UserSession","UserSession","injectedByRebarFrameworks","userSession","verificationResult","issue","UserToken2FromRequest","console","log","UserSession_id","id","cookie","httpOnly","expires","Date","ec","ExecutionContext","createRoot","schema","rootValue","pretty","graphiql","err"],"mappings":"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","sourcesContent":["// @flow\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport { graphqlHTTP } from 'express-graphql'\n\nimport delayPromise from '../rb-base-universal/delayPromise'\nimport ExecutionContext from '../rb-base-server/ExecutionContext'\nimport log from '../rb-base-server/log'\nimport { requestLoggerGraphQL } from '../_configuration/rb-base-server/requestLoggers'\nimport logServerRequest from '../rb-base-server/logServerRequest'\nimport { getObjectManager } from '../rb-base-server/ObjectManager'\n\nimport { getUserAndSessionIDByUserToken1_async, verifyUserToken2 } from './checkCredentials'\nimport schema from './graphql/schema' // Schema for GraphQL server\n\n// Guarantee that all object registrations and schema definitions are executed\nimport '../_configuration/rb-base-server/graphql/_schemas'\n\n// Create router for GraphQL\nconst serverGraphQL = express()\n\n// Set up parser\nserverGraphQL.use(bodyParser.json())\n\n// Set up logging\nserverGraphQL.use((req, res, next) => logServerRequest(req, res, next, requestLoggerGraphQL))\n\n//\n\nfunction graphQLError(message) {\n  return JSON.stringify({\n    errors: [\n      {\n        message,\n        locations: [\n          {\n            line: 888,\n            column: 777,\n          },\n        ],\n        stack: 'No stack information available',\n        path: [ 'node' ],\n      },\n    ],\n    data: null,\n  })\n}\n\n//\n\nasync function root(req, res, next) {\n  let objectManager\n  try {\n    for (let ixTry = 1; ; ixTry++) {\n      objectManager = await getObjectManager(req, res)\n\n      const UserAndSession = await getUserAndSessionIDByUserToken1_async(objectManager, req, true)\n      if (!UserAndSession) {\n        res\n          .status(500)\n          .send(graphQLError('GraphQL server was given a session, but the session is invalid'))\n        return\n      }\n\n      const a_User = UserAndSession.User\n      const a_UserSession = UserAndSession.UserSession\n\n      res.injectedByRebarFrameworks = { userSession: a_UserSession }\n\n      // Verify user\n      const verificationResult = verifyUserToken2(a_User, req, 'headers')\n\n      // If UserToken2 was provided, but verification fails, wait\n\n      if (\n        ixTry <= 5 &&\n        verificationResult &&\n        verificationResult.issue === 'Authentication token expected' &&\n        verificationResult.UserToken2FromRequest\n      ) {\n        // Wait for the user to 'appear' in the database as eventual consistency kicks in\n        await delayPromise(100 * ixTry)\n        console.log('XXX user not eventually consistently found')\n      } else if (verificationResult) {\n        log('warn', 'rb-appbase-server serverGraphQL root: Checking credentials failed', {\n          ixTry,\n          verificationResult,\n          req,\n          res,\n          UserSession_id: UserAndSession.UserSession ? UserAndSession.UserSession.id : 'no session',\n        })\n\n        // Expire cookie. This is the only way to 'delete' a cookie\n        res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n        res.status(403).send('{ \"error\": \"Authentication Failed\" }')\n\n        return\n      } else {\n        // verificationResult is null which means verification succeeded, proceed to\n        // server GraphQL\n        break\n      }\n    }\n\n    const ec = ExecutionContext.createRoot({ objectManager })\n\n    graphqlHTTP(() => {\n      return {\n        schema: schema,\n        rootValue: ec,\n        pretty: true,\n        graphiql: false,\n      }\n    })(req, res, next)\n  } catch (err) {\n    log('error', 'rb-appbase-server serverGraphQL root: Failed ', {\n      err,\n      req,\n      objectManager,\n    })\n    res.status(500).send(graphQLError('An error has occurred while running GraphQL query'))\n  }\n}\nserverGraphQL.use('/', root)\n\nexport default serverGraphQL\n"],"file":"serverGraphQL.js"}