{"version":3,"sources":["../../../units/rb-appbase-server/serverWebApp.js"],"names":["serverWebApp","use","req","res","siteInformation","reqUrl","url","reqUserAgent","headers","reqUserToken1","cookies","UserToken1","passUserToken1ToHeaders","query","content","status","redirect","redirectUrl","cookie","httpOnly","expires","Date","send","htmlContent","err","ReactDOMServer","renderToString"],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kG;;AAEA;AACA,MAAMA,YAAY,GAAG,uBAArB;;AAEAA,YAAY,CAACC,GAAb,CAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,QAAMC,eAAe,GAAG,MAAM,sCAAmBF,GAAnB,EAAwBC,GAAxB,CAA9B;;AAEA,MAAIC,eAAJ,EAAqB;AACnB,QAAI;AACF,YAAM,mCAAiBF,GAAjB,EAAsBC,GAAtB,EAA2BC,eAA3B,CAAN;;AAEA,YAAMC,MAAc,GAAGH,GAAG,CAACI,GAA3B;AACA,YAAMC,YAAoB,GAAGL,GAAG,CAACM,OAAJ,CAAY,YAAZ,CAA7B;AACA;AACA;AACA,UAAIC,aAAsB,GAAGP,GAAG,CAACQ,OAAJ,CAAYC,UAAzC;AACA,UAAIC,uBAAuB,GAAG,KAA9B;;AAEA;AACA;AACA;AACA,UAAI,CAACH,aAAD,IAAkBP,GAAG,CAACW,KAAJ,CAAUF,UAAhC,EAA4C;AAC1CF,QAAAA,aAAa,GAAGP,GAAG,CAACW,KAAJ,CAAUF,UAA1B;AACAC,QAAAA,uBAAuB,GAAG,IAA1B;AACD;;AAED;AACA,YAAME,OAAO,GAAG,MAAM;AACpBV,MAAAA,eADoB;AAEpBC,MAAAA,MAFoB;AAGpBE,MAAAA,YAHoB;AAIpBE,MAAAA,aAJoB;AAKpBG,MAAAA,uBALoB,CAAtB;;;AAQA,UAAIE,OAAO,CAACC,MAAR,KAAmB,GAAvB,EAA4B;AAC1BZ,QAAAA,GAAG,CAACa,QAAJ,CAAa,GAAb,EAAkBF,OAAO,CAACG,WAA1B;AACD,OAFD,MAEO;AACL,YAAIH,OAAO,CAACC,MAAR,KAAmB,GAAvB,EAA4B;AAC1B;AACAZ,UAAAA,GAAG,CAACe,MAAJ,CAAW,YAAX,EAAyB,EAAzB,EAA6B,EAAEC,QAAQ,EAAE,IAAZ,EAAkBC,OAAO,EAAE,IAAIC,IAAJ,CAAS,CAAT,CAA3B,EAA7B;AACD;;AAEDlB,QAAAA,GAAG,CAACY,MAAJ,CAAWD,OAAO,CAACC,MAAnB,EAA2BO,IAA3B,CAAgCR,OAAO,CAACS,WAAxC;AACD;AACF,KArCD,CAqCE,OAAOC,GAAP,EAAY;AACZ,wBAAI,OAAJ,EAAa,6CAAb,EAA4D,EAAEA,GAAF,EAA5D;AACArB,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBG,gBAAeC,cAAf,eAA8B,6BAAC,uBAAD,IAAgB,UAAU,EAAE,GAA5B,GAA9B,CAArB;AACD;AACF,GA1CD,MA0CO;AACLvB,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqB,eAArB;AACD;AACF,CAhDD,E;;AAkDetB,Y","sourcesContent":["// @flow\n\nimport express from 'express'\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\n\nimport ErrorComponent from '../_configuration/rb-appbase-webapp/ErrorComponent'\nimport log from '../rb-base-server/log'\nimport { getSiteInformation } from '../_configuration/rb-base-server/siteSettings'\nimport { preRequest_async } from '../_configuration/rb-appbase-server/preRequests'\n\nimport contentCreatorWebApp_async from './contentCreatorWebApp_async'\n\n// Create express router for the web app\nconst serverWebApp = express()\n\nserverWebApp.use(async (req, res) => {\n  const siteInformation = await getSiteInformation(req, res)\n\n  if (siteInformation) {\n    try {\n      await preRequest_async(req, res, siteInformation)\n\n      const reqUrl: string = req.url\n      const reqUserAgent: string = req.headers['user-agent']\n      // Notice that anonymous user creation may 'inject' newly created\n      // UserToken1 into request cookies\n      let reqUserToken1: ?string = req.cookies.UserToken1\n      let passUserToken1ToHeaders = false\n\n      // UserToken1 can be passed if content is loaded in iFrame,\n      // the domain is difference, hence the iFrame is unable to set\n      // cookies on (mobile?) Safari\n      if (!reqUserToken1 && req.query.UserToken1) {\n        reqUserToken1 = req.query.UserToken1\n        passUserToken1ToHeaders = true\n      }\n\n      //$FlowIgnore\n      const content = await contentCreatorWebApp_async(\n        siteInformation,\n        reqUrl,\n        reqUserAgent,\n        reqUserToken1,\n        passUserToken1ToHeaders,\n      )\n\n      if (content.status === 302) {\n        res.redirect(302, content.redirectUrl)\n      } else {\n        if (content.status === 403) {\n          // Log out for next attempt\n          res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n        }\n\n        res.status(content.status).send(content.htmlContent)\n      }\n    } catch (err) {\n      log('error', 'rb-appbase-server serverWebApp.use : Failed', { err })\n      res.status(500).send(ReactDOMServer.renderToString(<ErrorComponent httpStatus={500} />))\n    }\n  } else {\n    res.status(200).send('disassociated')\n  }\n})\n\nexport default serverWebApp\n"],"file":"serverWebApp.js"}