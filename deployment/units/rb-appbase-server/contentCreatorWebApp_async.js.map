{"version":3,"sources":["../../../units/rb-appbase-server/contentCreatorWebApp_async.js"],"names":["require","config","envHost","process","env","HOST","Error","envPort","PORT","htmlEjs","ejs","compile","fs","readFileSync","path","resolve","__dirname","serverErrorHtml","getAssetsPath","siteInformation","NODE_ENV","assetsPathPrefix","siteConfiguration","webapp","publicURL","assetsPath","version","envPortWebpack","PORT_WEBPACK","render","renderError","obj","error","status","contentCreatorWebApp_async","reqUrl","reqUserAgent","reqUserToken1","passUserToken1ToHeaders","htmlContent","root_html","artifactNamePrefix","graphQLServerUrl","fetcher","FetcherServer","UserToken2ServerRendering","userAgent","siteConfigurationSubset","builder","siteRouteConfig","redirect","element","url","historyMiddlewares","routeConfig","resolver","redirectUrl","relayPayloads","isJSON","indexOf","sheets","SheetsRegistry","helmet","Helmet","rewind","rootHTML","ReactDOMServer","renderToString","startsWith","parseInt","replace","assets_path","server_side_styles","toString","htmlHeadAdditions","JSON","stringify","UserToken1","err","NestedError"],"mappings":"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","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport path from 'path'\n\nimport ejs from 'ejs'\nimport createRender from 'found/createRender'\nimport { getFarceResult } from 'found/server'\nimport NestedError from 'nested-error-stacks'\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport { JssProvider, SheetsRegistry } from 'react-jss'\nimport { Helmet } from 'react-helmet'\nimport serialize from 'serialize-javascript'\n\nimport AppWrapper from '../_configuration/rb-appbase-webapp/AppWrapper'\nimport ErrorComponent from '../_configuration/rb-appbase-webapp/ErrorComponent'\nimport getGraphQLLocalServerURL from '../_configuration/rb-base-server/getGraphQLLocalServerURL'\nimport log from '../rb-base-server/log'\nimport { version } from '../../package.json'\nimport UserToken2ServerRendering from '../_configuration/rb-base-server/UserToken2ServerRendering'\nimport htmlHeadAdditions from '../_configuration/rb-appbase-webapp/htmlHeadAdditions'\nimport type { SiteInformation } from '../rb-appbase-server/types/SiteInformation.types'\nimport { createResolver, historyMiddlewares, routeConfig } from '../rb-appbase-webapp/router'\n\nimport FetcherServer from './fetcherServer'\n\n// Read environment\nrequire('dotenv').config()\n\nconst envHost = process.env.HOST\nif (envHost == null || typeof envHost !== 'string')\n  throw new Error('Error: rb-appbase-webapp requires the environment variable HOST to be set')\n\nconst envPort = process.env.PORT\nif (envPort == null || typeof envPort !== 'string')\n  throw new Error('Error: rb-appbase-webapp requires the environment variable PORT to be set')\n\n//\n\n// HTML page templates\nconst htmlEjs = ejs.compile(fs.readFileSync(path.resolve(__dirname, 'templates/html.ejs'), 'utf8'))\nconst serverErrorHtml = ejs.compile(\n  fs.readFileSync(path.resolve(__dirname, 'templates/serverErrorHtml.ejs'), 'utf8'),\n)\n\n//\n\nfunction getAssetsPath(siteInformation: SiteInformation): string {\n  if (process.env.NODE_ENV === 'production') {\n    // For when per-site assets are created\n    /*\n    const assetsPath =\n      siteInformation.isMaDesignerDisabled || siteInformation.inEditingMode\n        ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n          `/assets/${version}`\n        : // When in production mode, serve the assets compiled by designer\n          `/sassets/${version}.${siteInformation.siteConfiguration.metadata.version}`\n    */\n\n    // If public URL is available in site configuration, prefix the assets with the public URL\n    let assetsPathPrefix = ''\n    if (\n      siteInformation.siteConfiguration.webapp &&\n      siteInformation.siteConfiguration.webapp.publicURL\n    ) {\n      assetsPathPrefix = siteInformation.siteConfiguration.webapp.publicURL\n    }\n\n    // Asset path is versioned\n    const assetsPath = assetsPathPrefix + `/assets/${version}`\n    return assetsPath\n  } else {\n    // Get webpack port only in development. In production it can be omitted\n    const envPortWebpack = process.env.PORT_WEBPACK\n    if (envPortWebpack == null || typeof envPortWebpack !== 'string')\n      throw new Error(\n        'Error: rb-appbase-webapp requires the environment variable PORT_WEBPACK to be set',\n      )\n\n    // When in development, always go to webpack over http\n    return `http://${envHost}:${envPortWebpack}/${version}`\n  }\n}\n\nconst render = createRender({\n  renderError(obj: Object): React$Element<*> {\n    const { error } = obj\n\n    if (error.status !== 404) {\n      log('error', 'Error: rb-appbase-webapp createRender renderError', error)\n    }\n\n    return <ErrorComponent httpStatus={error.status} />\n  },\n})\n\nexport default (async function contentCreatorWebApp_async(\n  siteInformation: SiteInformation,\n  reqUrl: string,\n  reqUserAgent: string,\n  reqUserToken1: ?string,\n  passUserToken1ToHeaders: boolean,\n): Promise<{ htmlContent: string, status: number }> {\n  try {\n    const assetsPath = getAssetsPath(siteInformation)\n\n    // It is possible that artifact_id can not be determined during development. For instance, when browsing\n    // the project on localhost using a specific port, Chrome will request robots.txt and favicon.ico and\n    // they will not have the proper dev-host header. In this case simply report the file missing.\n    // This does not affect operation in production, since host will be passed for all requests.\n    if (!siteInformation) {\n      const htmlContent: string = serverErrorHtml({ root_html: 'Error 404' })\n      return { htmlContent, status: 404 }\n    }\n\n    // If public URL is available in site configuration, prefix the assets with the public URL\n    let artifactNamePrefix = ''\n    if (\n      siteInformation.siteConfiguration.webapp &&\n      siteInformation.siteConfiguration.webapp.artifactNamePrefix\n    ) {\n      artifactNamePrefix = siteInformation.siteConfiguration.webapp.artifactNamePrefix\n    }\n\n    const graphQLServerUrl =\n      `http://${envHost}:${envPort}` +\n      artifactNamePrefix +\n      getGraphQLLocalServerURL(siteInformation)\n\n    const fetcher = new FetcherServer(graphQLServerUrl, reqUserToken1, UserToken2ServerRendering)\n\n    const userAgent = reqUserAgent\n    const { siteConfiguration } = siteInformation\n    const siteConfigurationSubset = {\n      webapp: siteConfiguration.webapp,\n      builder: siteConfiguration.builder,\n    }\n\n    const siteRouteConfig = routeConfig(siteConfigurationSubset)\n\n    const { redirect, element } = await getFarceResult({\n      url: reqUrl,\n      historyMiddlewares,\n      routeConfig: siteRouteConfig,\n      resolver: createResolver(fetcher),\n      render,\n    })\n\n    if (redirect) {\n      const htmlContent: string = serverErrorHtml({ root_html: 'Error 302' })\n      const redirectUrl: string = redirect.url\n      return { htmlContent, redirectUrl, status: 302 }\n    }\n\n    const relayPayloads = serialize(fetcher, { isJSON: true })\n\n    if (\n      typeof relayPayloads === 'string' &&\n      relayPayloads.indexOf(\n        // Notice that the string has no closing brace. A typical error string looks like:\n        // '[{\"errors\":[{\"message\":\"GraphQL server was given a session, but the session is invalid\",\n        // \"locations\":[{\"line\":888,\"column\":777}],\"stack\":\"No stack information available\",\n        // \"path\":[\"node\"]}],\"data\":null}]'\n        '{\"message\":\"GraphQL server was given a session, but the session is invalid\"',\n      ) > 0\n    ) {\n      const htmlContent: string = serverErrorHtml({ root_html: 'Error 403. Please log in again.' })\n      return {\n        status: 403,\n        htmlContent,\n      }\n    }\n\n    // [2 Crossroads][server] Update server rendering according to https://material-ui.com/guides/server-rendering/\n    const sheets = new SheetsRegistry()\n    const helmet = Helmet.rewind()\n\n    const rootHTML = ReactDOMServer.renderToString(\n      <JssProvider registry={sheets}>\n        <AppWrapper userAgent={userAgent} siteConfiguration={siteConfigurationSubset} url={reqUrl}>\n          {element}\n        </AppWrapper>\n      </JssProvider>,\n    )\n\n    if (rootHTML.startsWith('Error ')) {\n      const status = parseInt(rootHTML.replace('Error ', ''))\n      const htmlContent: string = serverErrorHtml({ root_html: rootHTML })\n\n      return { status, htmlContent }\n    } else {\n      const htmlContent: string = htmlEjs({\n        assets_path: assetsPath,\n        root_html: rootHTML,\n        server_side_styles: sheets.toString(),\n        helmet,\n        htmlHeadAdditions,\n        siteConfiguration: JSON.stringify(siteConfigurationSubset),\n        relayPayloads,\n        UserToken1: JSON.stringify(passUserToken1ToHeaders ? reqUserToken1 : null),\n      })\n\n      return { status: 200, htmlContent }\n    }\n  } catch (err) {\n    throw new NestedError('Rendering failed', err)\n  }\n})\n"],"file":"contentCreatorWebApp_async.js"}