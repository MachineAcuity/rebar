{"version":3,"sources":["../../../units/rb-base-tools/buildUnits.js"],"names":["fs","fsWithCallbacks","promises","prettierESLintOptions","eslintConfig","eslintRC","prettierOptions","mergeScripts","scripts1","scripts2","scripts","Object","assign","scriptName","script","script2","createPackageJson","units","packageJsonFileName","path","resolve","currentPackageAsJSONString","readFile","toString","currentPackageAsObject","JSON","parse","packageAsObject","dependencies","devDependencies","engines","husky","name","version","unitName","packageAsObjectName","packageToAddAsObject","createMutations","mutationsImports","mutationsExports","endsWith","mutationsDir","mutationFileNames","readdir","mutationFileName","mutation","substring","length","push","replace","mutations","concat","text","join","createSchemas","schemasImports","schemasDir","objectTypeFileNames","objectTypeFileName","objectType","schemas","createViewerFields","viewerFieldsImports","viewerFieldsExports","viewerFieldsFileName","viewerFieldsImportName","viewerFields","getUnits","filter","fileName","main","taskPromises","Promise","all","then","console","log"],"mappings":"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","sourcesContent":["// @flow\n\nimport fsWithCallbacks from 'fs'\nimport path from 'path'\n\nimport prettierESLint from 'prettier-eslint'\nimport sortedJSONStringify from 'sorted-json-stringify'\n\n// $FlowIgnore Not sure why it gives an error. The file does exist\nimport eslintRC from '../../.eslintrc.json'\nimport fsExists from '../rb-base-server/fsExists'\n// $FlowIgnore it is a valid path actually\nimport prettierOptions from '../../.prettierrc.json'\nimport buildUnits from '../_configuration/rb-base-tools/buildUnits'\nimport ensureFileContent from '../rb-base-server/ensureFileContent'\n\nconst fs = fsWithCallbacks.promises\n\nconst prettierESLintOptions = {\n  eslintConfig: eslintRC,\n  prettierOptions,\n}\n\nfunction mergeScripts(scripts1, scripts2) {\n  const scripts = Object.assign({}, scripts1)\n\n  for (let scriptName in scripts2) {\n    const script = scripts[scriptName]\n    const script2 = scripts2[scriptName]\n\n    if (script && script2) {\n      scripts[scriptName] = script + ' && ' + script2\n    } else if (script2) {\n      scripts[scriptName] = script2\n    }\n  }\n\n  return scripts\n}\n\nasync function createPackageJson(units: Array<string>) {\n  const packageJsonFileName = path.resolve('./package.json')\n  const currentPackageAsJSONString = (await fs.readFile(packageJsonFileName)).toString()\n  const currentPackageAsObject = JSON.parse(currentPackageAsJSONString)\n  const packageAsObject = {\n    dependencies: {},\n    devDependencies: {},\n    engines: {},\n    husky: {},\n    name: null,\n    //prettier: {},\n    scripts: {},\n    version: null,\n  }\n\n  // Make sure not to overwrite version information\n  packageAsObject.version = currentPackageAsObject.version\n  packageAsObject.name = currentPackageAsObject.name\n\n  // Add packages to object\n  for (let unitName of units) {\n    const packageAsObjectName = path.resolve('./units', unitName, 'package.part.json')\n    if (await fsExists(packageAsObjectName)) {\n      const packageToAddAsObject = JSON.parse((await fs.readFile(packageAsObjectName)).toString())\n\n      if (packageToAddAsObject.dependencies)\n        Object.assign(packageAsObject.dependencies, packageToAddAsObject.dependencies)\n      if (packageToAddAsObject.devDependencies)\n        Object.assign(packageAsObject.devDependencies, packageToAddAsObject.devDependencies)\n      if (packageToAddAsObject.engines)\n        Object.assign(packageAsObject.engines, packageToAddAsObject.engines)\n      if (packageToAddAsObject.husky)\n        Object.assign(packageAsObject.husky, packageToAddAsObject.husky)\n      // if (packageToAddAsObject.prettier)\n      //   Object.assign(packageAsObject.prettier, packageToAddAsObject.prettier)\n      if (packageToAddAsObject.scripts)\n        packageAsObject.scripts = mergeScripts(\n          packageAsObject.scripts,\n          packageToAddAsObject.scripts,\n        )\n    }\n  }\n\n  await ensureFileContent(\n    packageJsonFileName,\n    currentPackageAsJSONString,\n    sortedJSONStringify(packageAsObject, null, 2),\n    true,\n  )\n}\n\nasync function createMutations(units: Array<string>) {\n  const mutationsImports = []\n  const mutationsExports = []\n\n  for (let unitName of units)\n    if (unitName.endsWith('-server')) {\n      const mutationsDir = path.resolve('./units', unitName, 'graphql/mutation')\n      if (await fsExists(mutationsDir)) {\n        const mutationFileNames = await fs.readdir(mutationsDir)\n\n        for (let mutationFileName of mutationFileNames) {\n          if (mutationFileName.endsWith('.js')) {\n            const mutation = mutationFileName.substring(0, mutationFileName.length - 3)\n            mutationsImports.push(\n              'import ' +\n                mutation.replace('.', '_') +\n                \" from '../../../\" +\n                unitName +\n                '/graphql/mutation/' +\n                mutation +\n                \"'\",\n            )\n            mutationsExports.push('  ' + mutation + ',')\n          }\n        }\n      }\n    }\n\n  let mutations = [ '// @flow', '' ]\n  mutations = mutations.concat(mutationsImports)\n  mutations = mutations.concat([ '', 'export default {' ])\n  mutations = mutations.concat(mutationsExports)\n  mutations = mutations.concat([ '}' ])\n\n  await ensureFileContent(\n    path.resolve('./units/_configuration/rb-base-server/graphql/_mutations.js'),\n    null,\n    prettierESLint({ text: mutations.join('\\r\\n'), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function createSchemas(units: Array<string>) {\n  const schemasImports = []\n\n  for (let unitName of units)\n    if (unitName.endsWith('-server')) {\n      const schemasDir = path.resolve('./units', unitName, 'graphql/model')\n      if (await fsExists(schemasDir)) {\n        const objectTypeFileNames = await fs.readdir(schemasDir)\n\n        for (let objectTypeFileName of objectTypeFileNames) {\n          if (objectTypeFileName.endsWith('.js')) {\n            const objectType = objectTypeFileName.substring(0, objectTypeFileName.length - 3)\n            schemasImports.push(\n              \"import '../../../\" + unitName + '/graphql/model/' + objectType + \"'\",\n            )\n          }\n        }\n      }\n    }\n\n  let schemas = [ '// @flow', '' ]\n  schemas = schemas.concat(schemasImports)\n  schemas = schemas.concat([ '', 'export default true' ])\n\n  await ensureFileContent(\n    path.resolve('./units/_configuration/rb-base-server/graphql/_schemas.js'),\n    null,\n    prettierESLint({ text: schemas.join('\\r\\n'), ...prettierESLintOptions }),\n    true,\n  )\n}\n\nasync function createViewerFields(units: Array<string>) {\n  const viewerFieldsImports = []\n  const viewerFieldsExports = []\n\n  for (let unitName of units)\n    if (unitName.endsWith('-server')) {\n      const viewerFieldsFileName = path.resolve(\n        './units',\n        unitName,\n        'graphql/type/_ViewerFields.js',\n      )\n      if (await fsExists(viewerFieldsFileName)) {\n        const viewerFieldsImportName = unitName.replace(/-/g, '_')\n        viewerFieldsImports.push(\n          'import ' +\n            viewerFieldsImportName +\n            \" from '../../../\" +\n            unitName +\n            \"/graphql/type/_ViewerFields'\",\n        )\n        viewerFieldsExports.push('  ...' + viewerFieldsImportName + ',')\n      }\n    }\n\n  let viewerFields = [ '// @flow', '' ]\n  viewerFields = viewerFields.concat(viewerFieldsImports)\n  viewerFields = viewerFields.concat([ '', 'export default {' ])\n  viewerFields = viewerFields.concat(viewerFieldsExports)\n  viewerFields = viewerFields.concat([ '}' ])\n\n  await ensureFileContent(\n    path.resolve('./units/_configuration/rb-base-server/graphql/_ViewerFields.js'),\n    null,\n    prettierESLint({\n      text: viewerFields.join('\\r\\n'),\n      ...prettierESLintOptions,\n    }),\n    true,\n  )\n}\n\nasync function getUnits() {\n  const units = (await fs.readdir('./units/')).filter(\n    (fileName) => fileName !== '.DS_Store' && fileName !== '_configuration',\n  )\n  return units\n}\n\nasync function main() {\n  const units = await getUnits()\n\n  const taskPromises = [\n    createPackageJson(units),\n    createViewerFields(units),\n    createSchemas(units),\n    createMutations(units),\n    buildUnits(units),\n  ]\n\n  await Promise.all(taskPromises)\n}\n\nmain().then(() => console.log('Fin.'))\n"],"file":"buildUnits.js"}