{"version":3,"sources":["../../../units/rb-base-tools/tunnel.js"],"names":["http","require","process","localtunnel","httpProxy","tunnels","createDevHostProxy","headers","proxyPort","serverPort","proxy","createProxyServer","on","proxyReq","req","res","options","headerName","setHeader","server","createServer","web","target","console","log","JSON","stringify","listen","establishTunnel_async","subdomain","applicationPort","tunnel","port","url","info","err","error","startProxiesAndTunnels","applications","application","local","instance"],"mappings":"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","sourcesContent":["const http = require('http')\nconst process = require('process')\n\nconst localtunnel = require('localtunnel')\nconst httpProxy = require('http-proxy')\n\n//\n\nconst tunnels = require('../_configuration/rb-base-tools/tunnels.json')\n\n//\n\nfunction createDevHostProxy(headers, proxyPort, serverPort) {\n  var proxy = httpProxy.createProxyServer({})\n\n  // Add headers\n  proxy.on('proxyReq', function(proxyReq, req, res, options) {\n    for (let headerName in headers) proxyReq.setHeader(headerName, headers[headerName])\n  })\n\n  var server = http.createServer(function(req, res) {\n    // Forward to server port\n    proxy.web(req, res, {\n      target: 'http://127.0.0.1:' + serverPort,\n    })\n  })\n\n  // Listen at proxy port\n  console.log(proxyPort + ' -> ' + serverPort + ' + ' + JSON.stringify(headers))\n  server.listen(proxyPort)\n}\n\n//\n\nasync function establishTunnel_async(subdomain, proxyPort, applicationPort) {\n  console.log(\n    'Establishing ' +\n      subdomain +\n      '.localtunnel.me - > :' +\n      proxyPort +\n      ' (bound to :' +\n      applicationPort +\n      ')',\n  )\n\n  const tunnel = await localtunnel({ port: proxyPort, subdomain })\n\n  console.log('Established  ' + tunnel.url)\n\n  tunnel.on('close', () => {\n    console.log('Closing tunnel for ' + subdomain + ' on proxy port ' + proxyPort)\n  })\n  tunnel.on('request', (info) => {\n    console.log(info)\n  })\n  tunnel.on('error', (err) => {\n    console.error(err)\n  })\n}\n\nasync function startProxiesAndTunnels(tunnels) {\n  const { applications } = tunnels\n\n  for (let application of applications) {\n    const { applicationPort } = application.local\n\n    for (let instance of application.instance) {\n      createDevHostProxy(instance.headers, instance.port, applicationPort)\n\n      if (instance.subdomain) {\n        await establishTunnel_async(instance.subdomain, instance.port, applicationPort)\n      }\n    }\n  }\n}\n\nprocess.on('uncaughtException', function(err) {\n  console.log('uncaughtException:')\n  console.log(err)\n})\n//\n// Start the proxies\n//\n;(async () => {\n  await startProxiesAndTunnels(tunnels)\n})()\n"],"file":"tunnel.js"}