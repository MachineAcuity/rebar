{"version":3,"sources":["../../../../../units/rb-example-todo-server/graphql/mutation/ToDoUpdateRename.js"],"names":["name","inputFields","id","type","GraphQLNonNull","GraphQLID","ToDo_Text","GraphQLString","outputFields","ToDo","ToDoType","resolve","local_id","args","context","rootValue","ec","objectManager","om","getOneObject_async","mutateAndGetPayload","update"],"mappings":";;AAEA;AACA;;AAEA;AACA,oE,8FANA;;AAQA;;AAEe,gDAA6B;AAC1CA,EAAAA,IAAI,EAAE,kBADoC;;AAG1CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,EAAE,EAAE,EAAEC,IAAI,EAAE,IAAIC,uBAAJ,CAAmBC,kBAAnB,CAAR,EADO;AAEXC,IAAAA,SAAS,EAAE,EAAEH,IAAI,EAAE,IAAIC,uBAAJ,CAAmBG,sBAAnB,CAAR,EAFA,EAH6B;;;AAQ1CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE;AACJN,MAAAA,IAAI,EAAEO,iBADF;AAEJC,MAAAA,OAAO,EAAE,CAAC,EAAEC,QAAF,EAAD,EAAe,EAAE,GAAGC,IAAL,EAAf,EAA4BC,OAA5B,EAAqC,EAAEC,SAAS,EAAEC,EAAb,EAArC,KAA2D;AAClE,cAAMC,aAA4B,GAAGD,EAAE,CAACE,EAAH,EAArC;AACA,eAAOD,aAAa,CAACE,kBAAd,CAAiC,MAAjC,EAAyC,EAAEjB,EAAE,EAAEU,QAAN,EAAzC,CAAP;AACD,OALG,EADM,EAR4B;;;;AAkB1CQ,EAAAA,mBAAmB,EAAE,OAAO,EAAElB,EAAF,EAAMI,SAAN,EAAP,EAA0BQ,OAA1B,EAAmC,EAAEC,SAAS,EAAEC,EAAb,EAAnC,KAAyD;AAC5E,UAAMC,aAA4B,GAAGD,EAAE,CAACE,EAAH,EAArC;AACA,UAAMN,QAAQ,GAAG,gCAAaV,EAAb,EAAiBA,EAAlC;;AAEA,UAAMe,aAAa,CAACI,MAAd,CAAqB,MAArB,EAA6B;AACjCnB,MAAAA,EAAE,EAAEU,QAD6B;AAEjCN,MAAAA,SAFiC,EAA7B,CAAN;;;AAKA,WAAO,EAAEM,QAAF,EAAP;AACD,GA5ByC,EAA7B,C","sourcesContent":["// @flow weak\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ObjectManager from '../../../rb-base-server/ObjectManager'\nimport ToDoType from '../type/ToDoType'\n\n//\n\nexport default mutationWithClientMutationId({\n  name: 'ToDoUpdateRename',\n\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n    ToDo_Text: { type: new GraphQLNonNull(GraphQLString) },\n  },\n\n  outputFields: {\n    ToDo: {\n      type: ToDoType,\n      resolve: ({ local_id }, { ...args }, context, { rootValue: ec }) => {\n        const objectManager: ObjectManager = ec.om()\n        return objectManager.getOneObject_async('ToDo', { id: local_id })\n      },\n    },\n  },\n\n  mutateAndGetPayload: async ({ id, ToDo_Text }, context, { rootValue: ec }) => {\n    const objectManager: ObjectManager = ec.om()\n    const local_id = fromGlobalId(id).id\n\n    await objectManager.update('ToDo', {\n      id: local_id,\n      ToDo_Text,\n    })\n\n    return { local_id }\n  },\n})\n"],"file":"ToDoUpdateRename.js"}