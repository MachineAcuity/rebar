{"version":3,"sources":["../../../../../units/rb-example-todo-server/graphql/mutation/ToDoDelete.js"],"names":["name","inputFields","id","type","GraphQLNonNull","GraphQLID","outputFields","deletedId","resolve","Viewer","ViewerType","parent","args","context","rootValue","ec","objectManager","om","getOneObject_async","getViewerUserId","mutateAndGetPayload","local_id","remove"],"mappings":";;AAEA;AACA;;AAEA;AACA,iH,8FANA;;AAQA;;AAEe,gDAA6B;AAC1CA,EAAAA,IAAI,EAAE,YADoC;;AAG1CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,EAAE,EAAE,EAAEC,IAAI,EAAE,IAAIC,uBAAJ,CAAmBC,kBAAnB,CAAR,EADO,EAH6B;;;AAO1CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE;AACTJ,MAAAA,IAAI,EAAEE,kBADG;AAETG,MAAAA,OAAO,EAAE,CAAC,EAAEN,EAAF,EAAD,KAAYA,EAFZ,EADC;;;AAMZO,IAAAA,MAAM,EAAE;AACNN,MAAAA,IAAI,EAAEO,mBADA;AAENF,MAAAA,OAAO,EAAE,CAACG,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwB,EAAEC,SAAS,EAAEC,EAAb,EAAxB,KAA8C;AACrD,cAAMC,aAA4B,GAAGD,EAAE,CAACE,EAAH,EAArC;AACA,eAAOD,aAAa,CAACE,kBAAd,CAAiC,MAAjC,EAAyC;AAC9ChB,UAAAA,EAAE,EAAEc,aAAa,CAACG,eAAd,EAD0C,EAAzC,CAAP;;AAGD,OAPK,EANI,EAP4B;;;;AAwB1CC,EAAAA,mBAAmB,EAAE,OAAO,EAAElB,EAAF,EAAP,EAAeW,OAAf,EAAwB,EAAEC,SAAS,EAAEC,EAAb,EAAxB,KAA8C;AACjE,UAAMC,aAA4B,GAAGD,EAAE,CAACE,EAAH,EAArC;AACA,UAAMI,QAAQ,GAAG,gCAAanB,EAAb,EAAiBA,EAAlC;;AAEA,UAAMc,aAAa,CAACM,MAAd,CAAqB,MAArB,EAA6B,EAAEpB,EAAE,EAAEmB,QAAN,EAA7B,CAAN;;AAEA,WAAO,EAAEnB,EAAF,EAAP;AACD,GA/ByC,EAA7B,C","sourcesContent":["// @flow weak\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ObjectManager from '../../../rb-base-server/ObjectManager'\nimport ViewerType from '../../../../units/rb-appbase-server/graphql/type/ViewerType'\n\n//\n\nexport default mutationWithClientMutationId({\n  name: 'ToDoDelete',\n\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n  },\n\n  outputFields: {\n    deletedId: {\n      type: GraphQLID,\n      resolve: ({ id }) => id,\n    },\n\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: ec }) => {\n        const objectManager: ObjectManager = ec.om()\n        return objectManager.getOneObject_async('User', {\n          id: objectManager.getViewerUserId(),\n        })\n      },\n    },\n  },\n\n  mutateAndGetPayload: async ({ id }, context, { rootValue: ec }) => {\n    const objectManager: ObjectManager = ec.om()\n    const local_id = fromGlobalId(id).id\n\n    await objectManager.remove('ToDo', { id: local_id })\n\n    return { id }\n  },\n})\n"],"file":"ToDoDelete.js"}