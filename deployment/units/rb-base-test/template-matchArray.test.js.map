{"version":3,"sources":["../../../units/rb-base-test/template-matchArray.test.js"],"names":["test","expect","word","text","template","toEqual","ixStart","ixStop","match","variables","float","symbol","templTag_arrOr","templTag_arrRep","items","min","max","templTag_arrVar","name","myVar","templateRepeatInRepeatWithOr"],"mappings":"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","sourcesContent":["import { matchArray } from '../rb-base-universal/template'\nimport { templTag_arrOr, templTag_arrRep, templTag_arrVar } from '../rb-base-universal/templateTags'\n\ntest('equal arrays, condition is arr tag', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      template: [ { word: { text: 'father' } }, { word: { text: 'mother' } } ],\n    }),\n  ).toEqual({ ixStart: 0, ixStop: 1, match: true, variables: {} })\n})\n\ntest('equal arrays, condition is arr tag, float', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      float: true,\n      template: [ { word: { text: 'father' } }, { word: { text: 'mother' } } ],\n    }),\n  ).toEqual({ ixStart: 0, ixStop: 1, match: true, variables: {} })\n})\n\ntest('unequal arrays, criterion is shorter, condition is arr tag', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      template: [ { word: { text: 'father' } } ],\n    }),\n  ).toEqual({ match: false })\n})\n\ntest('unequal arrays, criterion is shorter, condition is arr tag, float', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      float: true,\n      template: [ { word: { text: 'father' } } ],\n    }),\n  ).toEqual({ ixStart: 0, ixStop: 0, match: true, variables: {} })\n})\n\ntest('unequal arrays, criterion is starts later, condition is arr tag', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      template: [ { word: { text: 'mother' } } ],\n    }),\n  ).toEqual({ match: false })\n})\n\ntest('unequal arrays, criterion is starts later, condition is arr tag, float', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      float: true,\n      template: [ { word: { text: 'mother' } } ],\n    }),\n  ).toEqual({ ixStart: 1, ixStop: 1, match: true, variables: {} })\n})\n\ntest('unequal arrays, criterion is encased, condition is arr tag', () => {\n  expect(\n    matchArray(\n      [ { word: { text: 'father' } }, { word: { text: 'child' } }, { word: { text: 'mother' } } ],\n      { template: [ { word: { text: 'child' } } ] },\n    ),\n  ).toEqual({ match: false })\n})\n\ntest('unequal arrays, criterion is encased, condition is arr tag, float', () => {\n  expect(\n    matchArray(\n      [ { word: { text: 'father' } }, { word: { text: 'child' } }, { word: { text: 'mother' } } ],\n      { float: true, template: [ { word: { text: 'child' } } ] },\n    ),\n  ).toEqual({ ixStart: 1, ixStop: 1, match: true, variables: {} })\n})\n\ntest('unequal arrays, criterion is longer, condition is arr tag', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      template: [\n        { word: { text: 'father' } },\n        { word: { text: 'mother' } },\n        { word: { text: 'child' } },\n      ],\n    }),\n  ).toEqual({ match: false })\n})\n\ntest('unequal arrays, same length, different values, condition is arr tag', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      template: [ { word: { text: 'father' } }, { word: { text: 'child' } } ],\n    }),\n  ).toEqual({ match: false })\n})\n\ntest('condition is arr tag, test for wildcard word', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      template: [ { word: { text: 'father' } }, { word: {} } ],\n    }),\n  ).toEqual({ ixStart: 0, ixStop: 1, match: true, variables: {} })\n})\n\ntest('condition is arr tag, test for wildcard symbol (missing)', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      template: [ { word: { text: 'father' } }, { symbol: {} } ],\n    }),\n  ).toEqual({ match: false })\n})\n\ntest('matching arrays, condition is arr tag, with array or', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      template: [\n        { word: { text: 'father' } },\n        {\n          [templTag_arrOr]: [ [ { word: { text: 'mother' } } ], [ { word: { text: 'child' } } ] ],\n        },\n      ],\n    }),\n  ).toEqual({ ixStart: 0, ixStop: 1, match: true, variables: {} })\n})\n\ntest('non matching arrays, condition is arr tag, with array or', () => {\n  expect(\n    matchArray([ { word: { text: 'father' } }, { word: { text: 'mother' } } ], {\n      template: [\n        { word: { text: 'father' } },\n        {\n          [templTag_arrOr]: [ [ { word: { text: 'son' } } ], [ { word: { text: 'daughter' } } ] ],\n        },\n      ],\n    }),\n  ).toEqual({ match: false })\n})\n\ntest('matching arrays, condition is arr tag, with array or, multi-word', () => {\n  expect(\n    matchArray(\n      [ { word: { text: 'father' } }, { word: { text: 'mother' } }, { word: { text: 'of' } } ],\n      {\n        template: [\n          { word: { text: 'father' } },\n          {\n            [templTag_arrOr]: [\n              [ { word: { text: 'mother' } }, { word: { text: 'of' } } ],\n              [ { word: { text: 'child' } }, { word: { text: 'of' } } ],\n            ],\n          },\n        ],\n      },\n    ),\n  ).toEqual({ ixStart: 0, ixStop: 2, match: true, variables: {} })\n})\n\ntest('non matching arrays, condition is arr tag, with array or, multi-word', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'father' } },\n        { word: { text: 'mother' } },\n        { word: { text: 'savior' } },\n        { word: { text: 'of' } },\n      ],\n      {\n        template: [\n          { word: { text: 'father' } },\n          {\n            [templTag_arrOr]: [\n              [ { word: { text: 'mother' } }, { word: { text: 'of' } } ],\n              [ { word: { text: 'child' } }, { word: { text: 'of' } } ],\n            ],\n          },\n        ],\n      },\n    ),\n  ).toEqual({ match: false })\n})\n\ntest('Repeat, wildcard, matching', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'mother' } },\n        { word: { text: 'father' } },\n        { word: { text: 'daughter' } },\n        { word: { text: 'son' } },\n      ],\n      {\n        template: [\n          {\n            [templTag_arrRep]: {\n              items: [ { word: {} } ],\n              min: 0,\n              max: 3,\n            },\n          },\n          { word: { text: 'son' } },\n        ],\n      },\n    ),\n  ).toEqual({ ixStart: 0, ixStop: 3, match: true, variables: {} })\n})\n\ntest('Repeat, wildcard, matching, no min or max specified', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'ba' } },\n        { word: { text: 'ba' } },\n        { word: { text: 'ba' } },\n        { word: { text: 'barbarra' } },\n        { word: { text: 'ann' } },\n      ],\n      {\n        template: [\n          {\n            [templTag_arrRep]: {\n              items: [ { word: { text: 'ba' } } ],\n              min: 0,\n              max: 3,\n            },\n          },\n          { word: { text: 'barbarra' } },\n          { word: { text: 'ann' } },\n        ],\n      },\n    ),\n  ).toEqual({ ixStart: 0, ixStop: 4, match: true, variables: {} })\n})\n\ntest('Repeat, wildcard, not matching, no min or max specified', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'ba' } },\n        { word: { text: 'ba' } },\n        { word: { text: 'ba' } },\n        { word: { text: 'barbarra' } },\n        { word: { text: 'ann' } },\n      ],\n      {\n        template: [\n          {\n            [templTag_arrRep]: {\n              items: [ { word: { text: 'ma' } } ],\n              min: 0,\n              max: 3,\n            },\n          },\n          { word: { text: 'barbarra' } },\n          { word: { text: 'ann' } },\n        ],\n      },\n    ),\n  ).toEqual({ match: false })\n})\n\ntest('Repeat, wildcard, more than max', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'mother' } },\n        { word: { text: 'father' } },\n        { word: { text: 'daughter' } },\n        { word: { text: 'son' } },\n      ],\n      {\n        template: [\n          {\n            [templTag_arrRep]: {\n              items: [ { word: {} } ],\n              min: 0,\n              max: 2,\n            },\n          },\n          { word: { text: 'son' } },\n        ],\n      },\n    ),\n  ).toEqual({ match: false })\n})\n\ntest('Repeat, certain word, match, but fail because of more than max repeats', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'i' } },\n        { word: { text: 'like' } },\n        { word: { text: 'ice ' } },\n        { word: { text: 'cream' } },\n        { word: { text: 'very' } },\n        { word: { text: 'very' } },\n        { word: { text: 'very' } },\n        { word: { text: 'very' } },\n        { word: { text: 'very' } },\n        { word: { text: 'much' } },\n      ],\n      {\n        template: [\n          { word: { text: 'i' } },\n          { word: { text: 'like' } },\n          { word: { text: 'ice ' } },\n          { word: { text: 'cream' } },\n          {\n            [templTag_arrRep]: {\n              items: [ { word: { text: 'very' } } ],\n              min: 2,\n              max: 4,\n            },\n          },\n          { word: { text: 'much' } },\n        ],\n      },\n    ),\n  ).toEqual({ match: false })\n})\n\ntest('Repeat, certain word, match, succeed with max reps', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'i' } },\n        { word: { text: 'like' } },\n        { word: { text: 'ice ' } },\n        { word: { text: 'cream' } },\n        { word: { text: 'very' } },\n        { word: { text: 'very' } },\n        { word: { text: 'very' } },\n        { word: { text: 'very' } },\n        { word: { text: 'much' } },\n      ],\n      {\n        template: [\n          { word: { text: 'i' } },\n          { word: { text: 'like' } },\n          { word: { text: 'ice ' } },\n          { word: { text: 'cream' } },\n          {\n            [templTag_arrRep]: {\n              items: [ { word: { text: 'very' } } ],\n              min: 2,\n              max: 4,\n            },\n          },\n          { word: { text: 'much' } },\n        ],\n      },\n    ),\n  ).toEqual({ ixStart: 0, ixStop: 8, match: true, variables: {} })\n})\n\ntest('Repeat, certain word, match, succeed with min reps', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'i' } },\n        { word: { text: 'like' } },\n        { word: { text: 'ice ' } },\n        { word: { text: 'cream' } },\n        { word: { text: 'very' } },\n        { word: { text: 'very' } },\n        { word: { text: 'much' } },\n      ],\n      {\n        template: [\n          { word: { text: 'i' } },\n          { word: { text: 'like' } },\n          { word: { text: 'ice ' } },\n          { word: { text: 'cream' } },\n          {\n            [templTag_arrRep]: {\n              items: [ { word: { text: 'very' } } ],\n              min: 2,\n              max: 4,\n            },\n          },\n          { word: { text: 'much' } },\n        ],\n      },\n    ),\n  ).toEqual({ ixStart: 0, ixStop: 6, match: true, variables: {} })\n})\n\ntest('Repeat, certain word, match, fail  with less than min', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'i' } },\n        { word: { text: 'like' } },\n        { word: { text: 'ice ' } },\n        { word: { text: 'cream' } },\n        { word: { text: 'very' } },\n        { word: { text: 'much' } },\n      ],\n      {\n        template: [\n          { word: { text: 'i' } },\n          { word: { text: 'like' } },\n          { word: { text: 'ice ' } },\n          { word: { text: 'cream' } },\n          {\n            [templTag_arrRep]: {\n              items: [ { word: { text: 'very' } } ],\n              min: 2,\n              max: 4,\n            },\n          },\n          { word: { text: 'much' } },\n        ],\n      },\n    ),\n  ).toEqual({ match: false })\n})\n\ntest('unequal arrays, criterion is longer, condition is arr tag, with variable', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'father' } },\n        { word: { text: 'mother' } },\n        { word: { text: 'daughter' } },\n      ],\n      {\n        template: [\n          { word: { text: 'father' } },\n          { word: { text: 'mother' } },\n          {\n            [templTag_arrVar]: {\n              name: 'myVar',\n              items: [ { word: { text: 'daughter' } } ],\n            },\n          },\n        ],\n      },\n    ),\n  ).toEqual({\n    ixStart: 0,\n    ixStop: 2,\n    match: true,\n    variables: { myVar: [ { word: { text: 'daughter' } } ] },\n  })\n})\n\nconst templateRepeatInRepeatWithOr = [\n  {\n    [templTag_arrOr]: [\n      [ { word: { text: 'take' } } ],\n      [ { word: { text: 'bring' } } ],\n      [ { word: { text: 'carry' } } ],\n    ],\n  },\n  {\n    [templTag_arrRep]: {\n      items: [\n        {\n          [templTag_arrOr]: [ [ { word: { text: 'my' } } ], [ { word: { text: 'our' } } ] ],\n        },\n        {\n          [templTag_arrRep]: {\n            items: [ { word: { text: 'own' } } ],\n            min: 0,\n            max: 1,\n          },\n        },\n      ],\n      min: 0,\n      max: 1,\n    },\n  },\n]\n\ntest('Repeat in repeat with OR, just first word, match at the end', () => {\n  expect(\n    matchArray([ { word: { text: 'may' } }, { word: { text: 'I' } }, { word: { text: 'take' } } ], {\n      float: true,\n      template: templateRepeatInRepeatWithOr,\n    }),\n  ).toEqual({ ixStart: 2, ixStop: 2, match: true, variables: {} })\n})\n\ntest('Repeat in repeat with OR, just first word, match not at the end', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'can' } },\n        { word: { text: 'I' } },\n        { word: { text: 'bring' } },\n        { word: { text: 'it' } },\n      ],\n      {\n        float: true,\n        template: templateRepeatInRepeatWithOr,\n      },\n    ),\n  ).toEqual({ ixStart: 2, ixStop: 2, match: true, variables: {} })\n})\n\ntest('Repeat in repeat with OR, just first word, longer match', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'can' } },\n        { word: { text: 'I' } },\n        { word: { text: 'bring' } },\n        { word: { text: 'my' } },\n        { word: { text: 'bottle' } },\n      ],\n      {\n        float: true,\n        template: templateRepeatInRepeatWithOr,\n      },\n    ),\n  ).toEqual({ ixStart: 2, ixStop: 3, match: true, variables: {} })\n})\n\ntest('Repeat in repeat with OR, just first word, longest match', () => {\n  expect(\n    matchArray(\n      [\n        { word: { text: 'can' } },\n        { word: { text: 'I' } },\n        { word: { text: 'carry' } },\n        { word: { text: 'our' } },\n        { word: { text: 'own' } },\n        { word: { text: 'bottle' } },\n      ],\n      {\n        float: true,\n        template: templateRepeatInRepeatWithOr,\n      },\n    ),\n  ).toEqual({ ixStart: 2, ixStop: 4, match: true, variables: {} })\n})\n\n// IDEA [Project E] Make versions of the above tests with variable extraction, both true and false\n\n// IDEA [Project E] Implement variables in matching sub-arrays\n\n// IDEA [Project E] Repeat with OR condition\n"],"file":"template-matchArray.test.js"}