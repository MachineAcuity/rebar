{"version":3,"sources":["../../../units/rb-appbase-universal/fetcherBase.js"],"names":["FetcherBase","constructor","url","UserToken1","UserToken2","fetch","operation","variables","request","method","credentials","headers","body","JSON","stringify","query","text","response","json","err","NestedError","message"],"mappings":";;AAEA;AACA,gF;;AAEe,MAAMA,WAAN,CAAkB;;;;;;AAM/BC,EAAAA,WAAW,CAACC,GAAD,EAAcC,UAAd,EAAmCC,UAAnC,EAAuD;AAChE,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAED,QAAMC,KAAN,CAAYC,SAAZ,EAAyCC,SAAzC,EAAyD;AACvD,UAAMC,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,WAAW,EAAE,aAFC;AAGdC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPP,QAAAA,UAAU,EAAE,KAAKA,UAFV,EAHK;;AAOdQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,EAAEC,KAAK,EAAET,SAAS,CAACU,IAAnB,EAAyBT,SAAzB,EAAf,CAPQ,EAAhB;;;AAUA,QAAI;AACF,UAAI,KAAKJ,UAAT,EAAqB;AACnB;AACAK,QAAAA,OAAO,CAACG,OAAR,CAAgBR,UAAhB,GAA6B,KAAKA,UAAlC;AACD;;AAED,YAAMc,QAAQ,GAAG,MAAMZ,KAAK,CAAC,KAAKH,GAAN,EAAWM,OAAX,CAA5B;;AAEA,aAAOS,QAAQ,CAACC,IAAT,EAAP;AACD,KATD,CASE,OAAOC,GAAP,EAAY;AACZ,YAAM,IAAIC,0BAAJ;AACJ;AACG,WAAKjB,UAAL,GAAkB,KAAKA,UAAvB,GAAoC,QADvC;AAEE,oBAFF;AAGE,WAAKC,UAHP;AAIE,iBAJF;AAKES,MAAAA,IAAI,CAACC,SAAL,CAAeN,OAAf,CALF;AAME,aANF;AAOEW,MAAAA,GAAG,CAACE,OARF;AASJF,MAAAA,GATI,CAAN;;AAWD;AACF,GA7C8B,C","sourcesContent":["// @flow\n\nimport 'isomorphic-fetch'\nimport NestedError from 'nested-error-stacks'\n\nexport default class FetcherBase {\n  url: string\n  UserToken1: ?string\n  UserToken2: string\n  payloads: Array<any>\n\n  constructor(url: string, UserToken1: ?string, UserToken2: string) {\n    this.url = url\n    this.UserToken1 = UserToken1\n    this.UserToken2 = UserToken2\n  }\n\n  async fetch(operation: { text: string }, variables: any) {\n    const request = {\n      method: 'POST',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n        UserToken2: this.UserToken2,\n      },\n      body: JSON.stringify({ query: operation.text, variables }),\n    }\n\n    try {\n      if (this.UserToken1) {\n        // $FlowIgnore we can add the cookie, will be used on server\n        request.headers.UserToken1 = this.UserToken1\n      }\n\n      const response = await fetch(this.url, request)\n\n      return response.json()\n    } catch (err) {\n      throw new NestedError(\n        'FetcherBase failed UserToken1=' +\n          (this.UserToken1 ? this.UserToken1 : '<null>') +\n          ' UserToken2=' +\n          this.UserToken2 +\n          ' request=' +\n          JSON.stringify(request) +\n          ' with' +\n          err.message,\n        err,\n      )\n    }\n  }\n}\n"],"file":"fetcherBase.js"}